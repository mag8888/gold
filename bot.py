import asyncio
import logging
import sqlite3
from datetime import datetime, date
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
import os

from database import Database
from openai_service import OpenAIService
from scheduler import ReportScheduler
from reminder_system import start_habit_reminders, stop_habit_reminders, start_daily_reminder_check, active_reminders

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CORRECT_BOT_USERNAME = "Alteria_8_bot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    raise ValueError("BOT_TOKEN is required")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OnboardingStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_bio = State()
    waiting_for_product = State()
    waiting_for_cases = State()
    waiting_for_motivation = State()
    waiting_for_values = State()
    waiting_for_goals = State()
    waiting_for_lifestyle = State()
    waiting_for_social = State()

class GoalStates(StatesGroup):
    waiting_for_goals_input = State()
    waiting_for_goal_type = State()
    waiting_for_goal_update = State()

class EditStates(StatesGroup):
    waiting_for_manual_edit = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()

class HabitStates(StatesGroup):
    waiting_for_habit_name = State()
    waiting_for_habit_description = State()
    waiting_for_habit_type = State()
    waiting_for_habit_frequency = State()
    waiting_for_habit_reminder = State()
    waiting_for_habit_notes = State()

class CalendarStates(StatesGroup):
    waiting_for_event_title = State()
    waiting_for_event_description = State()
    waiting_for_event_date = State()
    waiting_for_event_time = State()
    waiting_for_event_type = State()
    waiting_for_reminder_time = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã"), KeyboardButton(text="üìÖ –ü—Ä–∏–≤—ã—á–∫–∏")],
            [KeyboardButton(text="üìÅ –ú–µ–Ω—é")],
            [KeyboardButton(text="üéØ –¶–µ–ª–∏"), KeyboardButton(text="üöÄ –†–∞–∑–≤–∏—Ç–∏–µ")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

def get_full_menu_keyboard():
    """–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜî –í–∏–∑–∏—Ç–∫–∞", callback_data="profile")],
            [InlineKeyboardButton(text="üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥", callback_data="networking")],
            [InlineKeyboardButton(text="üìã –û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä", callback_data="organizer")],
            [InlineKeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="calendar")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
        ]
    )
    return keyboard

def get_yes_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no")
            ]
        ]
    )
    return keyboard

def get_card_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_card")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_card")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_card")],
            [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = db.get_categories()
    keyboard_buttons = []
    
    for category in categories:
        button = InlineKeyboardButton(
            text=f"{category['category_emoji']} {category['category_name']}",
            callback_data=f"category_{category['category_id']}"
        )
        keyboard_buttons.append([button])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="goal_type_daily")],
            [InlineKeyboardButton(text="üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ", callback_data="goal_type_monthly")]
        ]
    )
    return keyboard

def get_goals_keyboard(goals, goal_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    keyboard_buttons = []
    
    for i, goal in enumerate(goals):
        emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
        text = f"{emoji} {goal['goal_text'][:30]}..."
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"update_goal_{goal['goal_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_status_keyboard(goal_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"goal_complete_{goal_id}")],
            [InlineKeyboardButton(text="‚ö°Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"goal_progress_{goal_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]
        ]
    )
    return keyboard

def get_habits_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="my_habits")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="habits_stats")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_habit_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è", callback_data="habit_type_daily")],
            [InlineKeyboardButton(text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="habit_type_weekly")],
            [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è", callback_data="habit_type_custom")]
        ]
    )
    return keyboard

def get_habits_list_keyboard(habits):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard_buttons = []
    
    for habit in habits:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import date
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        habit_stats = db.get_habit_stats(habit['user_id'], habit['habit_id'], days=1)
        completed_today = habit_stats.get('completed_count', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        target_frequency = habit.get('target_frequency', 1) or 1  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–ª–Ω–∏–µ–π –∏ –≥–∞–ª–æ—á–∫–æ–π –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if habit['is_active']:
            # –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            text = f"{target_frequency} ‚ö° {habit['habit_name']} ‚úÖ {completed_today}"
            status_emoji = "üü¢" if completed_today >= target_frequency else "üü°"
        else:
            text = f"‚è∏Ô∏è {habit['habit_name']}"
            status_emoji = "‚è∏Ô∏è"
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"habit_detail_{habit['habit_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_habit"),
        InlineKeyboardButton(text="üìä –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_habit_detail_keyboard(habit_id, is_active=True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"habit_complete_{habit_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"habit_skip_{habit_id}")
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if is_active:
        keyboard_buttons.append([InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"habit_pause_{habit_id}")])
    else:
        keyboard_buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"habit_resume_{habit_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"habit_stats_{habit_id}"),
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="my_habits")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_habit_frequency_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton(text="2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton(text="3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_3")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="freq_custom")]
        ]
    )
    return keyboard

def get_calendar_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
            [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è", callback_data="events_today")],
            [InlineKeyboardButton(text="üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="events_week")],
            [InlineKeyboardButton(text="üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="all_events")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_event_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ó–∞–¥–∞—á–∞", callback_data="event_type_task")],
            [InlineKeyboardButton(text="üìÖ –ü—Ä–∏–≤—ã—á–∫–∞", callback_data="event_type_habit")],
            [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="event_type_workout")],
            [InlineKeyboardButton(text="üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏", callback_data="event_type_meal")],
            [InlineKeyboardButton(text="ü§ù –í—Å—Ç—Ä–µ—á–∞", callback_data="event_type_meeting")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="event_type_reminder")],
            [InlineKeyboardButton(text="üìù –î—Ä—É–≥–æ–µ", callback_data="event_type_custom")]
        ]
    )
    return keyboard

def get_reminder_time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ 5 –º–∏–Ω—É—Ç", callback_data="reminder_5")],
            [InlineKeyboardButton(text="–ó–∞ 15 –º–∏–Ω—É—Ç", callback_data="reminder_15")],
            [InlineKeyboardButton(text="–ó–∞ 30 –º–∏–Ω—É—Ç", callback_data="reminder_30")],
            [InlineKeyboardButton(text="–ó–∞ 1 —á–∞—Å", callback_data="reminder_60")],
            [InlineKeyboardButton(text="–ó–∞ 1 –¥–µ–Ω—å", callback_data="reminder_1440")],
            [InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_none")]
        ]
    )
    return keyboard

def get_events_list_keyboard(events):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π"""
    keyboard_buttons = []
    
    for event in events:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        start_time = event['start_datetime'][:16] if event['start_datetime'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        type_emoji = {
            'task': 'üìã',
            'habit': 'üìÖ', 
            'workout': 'üí™',
            'meal': 'üçΩÔ∏è',
            'meeting': 'ü§ù',
            'reminder': '‚è∞',
            'custom': 'üìù'
        }.get(event['event_type'], 'üìù')
        
        text = f"{type_emoji} {event['event_title']} ({start_time})"
        button = InlineKeyboardButton(
            text=text[:50] + "..." if len(text) > 50 else text,
            callback_data=f"event_detail_{event['event_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_event"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="calendar_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_event_detail_keyboard(event_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"event_complete_{event_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_cancel_{event_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="all_events")]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    logger.info(f"START command received: user_id={user_id}, text='{message.text}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    referral_code = None
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        logger.info(f"Start parameter: '{start_param}'")
        if start_param.startswith('REF_'):
            referral_code = start_param
            logger.info(f"Referral code found: '{referral_code}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.get_user(user_id)
    logger.info(f"User exists in DB: {user is not None}")
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer_id = None
        if referral_code:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            referrer = db.get_user_by_referral_code(referral_code)
            logger.info(f"Referrer found: {referrer}")
            if referrer:
                referrer_id = referrer['user_id']
                logger.info(f"Referrer ID: {referrer_id}")
        
        db.create_user(user_id, first_name, last_name, username, referrer_id)
        logger.info(f"New user created with referrer_id: {referrer_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if referrer_id:
            try:
                await bot.send_message(
                    referrer_id, 
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name}!"
                )
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è! üöÄ\n\n–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É?"
        
        await message.answer(
            welcome_text,
            reply_markup=get_yes_no_keyboard()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user['onboarding_completed']:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏!",
                reply_markup=get_yes_no_keyboard()
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
    )
    
    await message.answer(
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=None
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()

@dp.message(StateFilter(AdminStates.waiting_for_broadcast_message))
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    progress_msg = await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    sent_count, failed_count = await scheduler.send_broadcast_message(broadcast_text)
    
    await progress_msg.edit_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )
    
    await state.clear()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_users = db.get_all_active_users()
    total_users = len(all_users)
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_users}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: 0

üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=None,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "yes")
async def start_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É.\n\n1/10. –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
    )
    await state.set_state(OnboardingStates.waiting_for_first_name)
    await callback.answer()

@dp.callback_query(F.data == "no")
async def skip_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç–∫—É –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=None
    )
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA! üéâ",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
@dp.message(StateFilter(OnboardingStates.waiting_for_first_name))
async def process_first_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(first_name=message.text)
    await message.answer("2/10. –í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é.")
    await state.set_state(OnboardingStates.waiting_for_last_name)

@dp.message(StateFilter(OnboardingStates.waiting_for_last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    await state.update_data(last_name=message.text)
    await message.answer("3/10. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ).")
    await state.set_state(OnboardingStates.waiting_for_bio)

@dp.message(StateFilter(OnboardingStates.waiting_for_bio))
async def process_bio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    await state.update_data(bio=message.text)
    await message.answer("4/10. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äì –∫–∞–∫–æ–π.")
    await state.set_state(OnboardingStates.waiting_for_product)

@dp.message(StateFilter(OnboardingStates.waiting_for_product))
async def process_product(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    await state.update_data(product_info=message.text)
    await message.answer("5/10. –û–ø–∏—à–∏ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –∫–µ–π—Å—ã.")
    await state.set_state(OnboardingStates.waiting_for_cases)

@dp.message(StateFilter(OnboardingStates.waiting_for_cases))
async def process_cases(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ–π—Å–æ–≤"""
    await state.update_data(case_studies=message.text)
    await message.answer("6/10. –ó–ê–ß–ï–ú —Ç–µ–±–µ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥?")
    await state.set_state(OnboardingStates.waiting_for_motivation)

@dp.message(StateFilter(OnboardingStates.waiting_for_motivation))
async def process_motivation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    await state.update_data(networking_motive=message.text)
    await message.answer("7/10. –¢–æ–ø-3 —Ç–≤–æ–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–∏.")
    await state.set_state(OnboardingStates.waiting_for_values)

@dp.message(StateFilter(OnboardingStates.waiting_for_values))
async def process_values(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    await state.update_data(life_values=message.text)
    await message.answer("8/10. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É —Ç–µ–±—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?")
    await state.set_state(OnboardingStates.waiting_for_goals)

@dp.message(StateFilter(OnboardingStates.waiting_for_goals))
async def process_goals(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–π"""
    await state.update_data(goals=message.text)
    await message.answer("9/10. –ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Ç—ã –≤–µ–¥—ë—à—å? (—Å–ø–æ—Ä—Ç, –π–æ–≥–∞, –º–µ–¥–∏—Ç–∞—Ü–∏–∏‚Ä¶)")
    await state.set_state(OnboardingStates.waiting_for_lifestyle)

@dp.message(StateFilter(OnboardingStates.waiting_for_lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"""
    await state.update_data(lifestyle=message.text)
    await message.answer("10/10. –°—Å—ã–ª–∫–∞ –Ω–∞ Instagram (–∏–ª–∏ –¥—Ä—É–≥—É—é —Å–æ—Ü—Å–µ—Ç—å).")
    await state.set_state(OnboardingStates.waiting_for_social)

@dp.message(StateFilter(OnboardingStates.waiting_for_social))
async def process_social_and_generate_card(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    await state.update_data(social_link=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –º–µ–Ω—é
    with open('/home/ubuntu/gold/welcome_image.png', 'rb') as photo:
        await message.answer_photo(
            photo=photo,
            caption="üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA!**\n\n"
                   "–í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ –∏–∑—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É...")
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ openai_service
        business_card = f"""üìã **–í–∏–∑–∏—Ç–∫–∞ {data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}**

üë§ **–ò–º—è:** {data.get('first_name', '')} {data.get('last_name', '')}
üè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** {data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {data.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìß **Email:** {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üåê **–°–æ—Ü—Å–µ—Ç–∏:** {data.get('social_link', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üí° **–û —Å–µ–±–µ:** {data.get('bio', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
üéØ **–¶–µ–ª–∏:** {data.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}
ü§ù **–ò–Ω—Ç–µ—Ä–µ—Å—ã:** {data.get('interests', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}"""
        
        if business_card:
            await progress_msg.delete()
            await message.answer(
                "üéâ –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" + business_card,
                reply_markup=get_card_management_keyboard(),
                parse_mode="Markdown"
            )
    except Exception as e:
        await progress_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(generated_card=business_card)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π
@dp.callback_query(F.data == "save_card")
async def save_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    profile_data = {
        'bio': data.get('bio'),
        'product_info': data.get('product_info'),
        'case_studies': data.get('case_studies'),
        'networking_motive': data.get('networking_motive'),
        'life_values': data.get('life_values'),
        'lifestyle': data.get('lifestyle'),
        'social_link': data.get('social_link'),
        'generated_card': data.get('generated_card')
    }
    
    if db.save_profile(callback.from_user.id, profile_data):
        # –û—Ç–º–µ—á–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        db.complete_onboarding(callback.from_user.id)
        
        await callback.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=get_categories_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    category_id = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = db.get_categories()
    selected_category = next((cat for cat in categories if str(cat['category_id']) == category_id), None)
    
    if selected_category:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        user_profile = db.get_profile(callback.from_user.id)
        if user_profile:
            user_profile['category'] = selected_category['category_name']
            db.save_profile(callback.from_user.id, user_profile)
        
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_category['category_emoji']} {selected_category['category_name']}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA! üéâ",
            reply_markup=None
        )
        
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "regenerate_card")
async def regenerate_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    progress_msg = await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∏–∑–∏—Ç–∫–∏...")
    
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç–∫—É
    new_card = openai_service.regenerate_business_card(data, data.get('generated_card', ''))
    
    if new_card:
        await progress_msg.edit_text(
            "üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–∑–∏—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!\n\n" + new_card,
            reply_markup=get_card_management_keyboard(),
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(generated_card=new_card)
    else:
        await progress_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–∏–∑–∏—Ç–∫–∏.",
            reply_markup=get_card_management_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "edit_card")
async def edit_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏:",
        reply_markup=None
    )
    await state.set_state(EditStates.waiting_for_manual_edit)
    await callback.answer()

@dp.message(StateFilter(EditStates.waiting_for_manual_edit))
async def process_manual_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    new_card = message.text
    await state.update_data(generated_card=new_card)
    
    await message.answer(
        "‚úÖ –í–∏–∑–∏—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + new_card,
        reply_markup=get_card_management_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(None)

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìÅ –ú–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer(
        "üìÅ **–ü–æ–ª–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_full_menu_keyboard(),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üÜî –í–∏–∑–∏—Ç–∫–∞")
async def show_business_card(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–∏–∑–∏—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_profile = db.get_profile(message.from_user.id)
    
    if user_profile and user_profile.get('generated_card'):
        await message.answer(
            "üìã –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞:\n\n" + user_profile['generated_card'],
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–∑–∏—Ç–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_yes_no_keyboard()
        )

@dp.message(F.text == "üéØ –¶–µ–ª–∏")
async def show_goals_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await message.answer(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìÖ –ü—Ä–∏–≤—ã—á–∫–∏")
async def show_habits_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habits = db.get_user_habits(user_id, active_only=True)
    daily_habits = [habit for habit in habits if habit.get('habit_type') == 'daily']
    
    if not daily_habits:
        await message.answer(
            "üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")],
                    [InlineKeyboardButton(text="üìä –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu")]
                ]
            ),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    await message.answer(
        "üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**",
        reply_markup=get_habits_list_keyboard(daily_habits),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
    from datetime import date, timedelta
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    today_events = db.get_user_events(user_id, start_date=today.isoformat(), end_date=today.isoformat())
    upcoming_events = db.get_user_events(user_id, start_date=tomorrow.isoformat(), end_date=(today + timedelta(days=7)).isoformat())
    
    stats_text = f"üìä –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_events)}\n"
    stats_text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (7 –¥–Ω–µ–π): {len(upcoming_events)}"
    
    await message.answer(
        f"üìÜ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫**\n\n{stats_text}",
        reply_markup=get_calendar_menu_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "goals_menu")
async def show_goals_menu_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏ (callback –≤–µ—Ä—Å–∏—è)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await callback.message.edit_text(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "add_goals")
async def add_goals_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ —Å–ø–∏—Å–∫–æ–º (–∫–∞–∂–¥–∞—è —Ü–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
        reply_markup=None
    )
    await state.set_state(GoalStates.waiting_for_goals_input)
    await callback.answer()

@dp.message(StateFilter(GoalStates.waiting_for_goals_input))
async def process_goals_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π"""
    goals_text = message.text.strip()
    goals_list = [goal.strip() for goal in goals_text.split('\n') if goal.strip()]
    
    if not goals_list:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å.")
        return
    
    await state.update_data(goals_list=goals_list)
    await message.answer(
        f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–ª–µ–π: {len(goals_list)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π:",
        reply_markup=get_goal_type_keyboard()
    )
    await state.set_state(GoalStates.waiting_for_goal_type)

@dp.callback_query(F.data.startswith("goal_type_"))
async def process_goal_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""
    goal_type = callback.data.split("_")[2]  # daily –∏–ª–∏ monthly
    data = await state.get_data()
    goals_list = data.get('goals_list', [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_count = 0
    for goal_text in goals_list:
        goal_id = db.add_goal(
            user_id=callback.from_user.id,
            goal_text=goal_text,
            goal_type=goal_type,
            due_date=date.today() if goal_type == 'daily' else None
        )
        if goal_id:
            saved_count += 1
    
    type_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ" if goal_type == "daily" else "–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ"
    await callback.message.edit_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} {type_text} —Ü–µ–ª–µ–π!",
        reply_markup=None
    )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "show_daily_goals")
async def show_daily_goals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='daily',
        date_filter=date.today()
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏'",
            reply_markup=None
        )
    else:
        goals_text = "üìÖ **–ú–æ–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        for goal in goals:
            emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
            goals_text += f"{emoji} {goal['goal_text']}\n"
        
        await callback.message.edit_text(
            goals_text,
            parse_mode="Markdown",
            reply_markup=None
        )
    
    await callback.answer()

@dp.callback_query(F.data == "show_monthly_goals")
async def show_monthly_goals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='monthly'
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü.\n\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏'",
            reply_markup=None
        )
    else:
        goals_text = "üìÜ **–ú–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü:**\n\n"
        for goal in goals:
            emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
            goals_text += f"{emoji} {goal['goal_text']}\n"
        
        await callback.message.edit_text(
            goals_text,
            parse_mode="Markdown",
            reply_markup=None
        )
    
    await callback.answer()

@dp.callback_query(F.data == "update_goals")
async def update_goals_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –û–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="update_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –û–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ", callback_data="update_monthly_goals")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]
        ]
    )
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "update_daily_goals")
async def update_daily_goals(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='daily',
        date_filter=date.today()
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=get_goals_keyboard(goals, 'daily')
        )
    
    await callback.answer()

@dp.callback_query(F.data == "update_monthly_goals")
async def update_monthly_goals(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='monthly'
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=get_goals_keyboard(goals, 'monthly')
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("update_goal_"))
async def select_goal_for_update(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    goal_id = int(callback.data.split("_")[2])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ü–µ–ª–∏:",
        reply_markup=get_goal_status_keyboard(goal_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_complete_"))
async def complete_goal(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ —Ü–µ–ª–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    goal_id = int(callback.data.split("_")[2])
    
    if db.update_goal_status(goal_id, 'completed'):
        await callback.message.edit_text(
            "‚úÖ –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_progress_"))
async def set_goal_in_progress(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ —Ü–µ–ª–∏ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    goal_id = int(callback.data.split("_")[2])
    
    if db.update_goal_status(goal_id, 'in_progress'):
        await callback.message.edit_text(
            "‚ö°Ô∏è –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
@dp.message(Command("mylink"))
async def get_correct_referral_link(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    
    # –ñ–µ—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    if user_id == 6840451873:  # –í–∞—à ID
        correct_link = "https://t.me/Alteria_8_bot?start=REF_6840451873_20250713"
        await message.answer(
            f"‚úÖ **–í–∞—à–∞ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n{correct_link}\n\n"
            f"üéØ –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            f"üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π.",
            parse_mode="Markdown"
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        referral_stats = db.get_referral_stats(user_id)
        referral_link = f"https://t.me/Alteria_8_bot?start={referral_stats['referral_code']}"
        await message.answer(
            f"üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n{referral_link}",
            parse_mode="Markdown"
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
@dp.message(Command("referral"))
async def get_referral_link(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id
    referral_stats = db.get_referral_stats(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    referral_link = f"https://t.me/{CORRECT_BOT_USERNAME}?start={referral_stats['referral_code']}"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", 
                url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ AlteriA!"
            )]
        ]
    )
    
    await message.answer(
        f"üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n`{referral_link}`\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['referral_count']} —á–µ–ª–æ–≤–µ–∫\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_stats['total_earnings']:.2f} ‚ÇΩ\n\n"
        f"‚è∞ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%H:%M:%S')}",
        parse_mode="Markdown",
        reply_markup=keyboard
    )

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–Ω—é
@dp.message(F.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã")
async def partners_handler_new(message: types.Message):
    """–ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü–∞—Ä—Ç–Ω—ë—Ä—ã"""
    user_id = message.from_user.id
    referral_stats = db.get_referral_stats(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    referral_link = f"https://t.me/{CORRECT_BOT_USERNAME}?start={referral_stats['referral_code']}"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", 
                url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ AlteriA!"
            )],
            [InlineKeyboardButton(
                text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", 
                callback_data="show_my_referrals"
            )]
        ]
    )
    
    text = f"""ü§ù **–ü–∞—Ä—Ç–Ω—ë—Ä—ã**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['referral_count']} —á–µ–ª–æ–≤–µ–∫
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_stats['total_earnings']:.2f} ‚ÇΩ
üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
`{referral_link}`

üè™ **–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤** - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üìà **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞** - –∞–∫—Ç–∏–≤–Ω–∞

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
    
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query(F.data == "show_my_referrals")
async def show_my_referrals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    try:
        referrals = db.get_user_referrals(user_id)
        
        if not referrals:
            await callback.message.edit_text(
                "üë• **–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_partners")]
                    ]
                )
            )
            await callback.answer()
            return
        
        text = f"üë• **–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã ({len(referrals)})**\n\n"
        
        for i, referral in enumerate(referrals[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            name = referral['first_name'] or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            if referral['last_name']:
                name += f" {referral['last_name']}"
            
            username = f"@{referral['username']}" if referral['username'] else "–±–µ–∑ username"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            from datetime import datetime
            timestamp = datetime.fromisoformat(referral['timestamp'].replace('Z', '+00:00'))
            date_str = timestamp.strftime('%d.%m.%Y')
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            name_escaped = name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
            username_escaped = username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
            
            text += f"{i}. **{name_escaped}** ({username_escaped})\n"
            text += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {date_str}\n"
            if referral['bio']:
                bio_short = referral['bio'][:50] + "..." if len(referral['bio']) > 50 else referral['bio']
                bio_escaped = bio_short.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
                text += f"   üìù {bio_escaped}\n"
            text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral['earnings']:.2f} ‚ÇΩ\n\n"
        
        if len(referrals) > 10:
            text += f"... –∏ –µ—â–µ {len(referrals) - 10} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
        
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_partners")]
            ]
        )
        
        await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        import traceback
        logger.error(f"Error showing referrals: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await callback.message.edit_text(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_partners")]
                    ]
                )
            )
        except:
            pass
        
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")

@dp.callback_query(F.data == "back_to_partners")
async def back_to_partners(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–¥–µ–ª—É –ø–∞—Ä—Ç–Ω–µ—Ä—ã"""
    user_id = callback.from_user.id
    referral_stats = db.get_referral_stats(user_id)
    
    referral_link = f"https://t.me/{CORRECT_BOT_USERNAME}?start={referral_stats['referral_code']}"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", 
                url=f"https://t.me/share/url?url={referral_link}&text=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ AlteriA!"
            )],
            [InlineKeyboardButton(
                text="üë• –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", 
                callback_data="show_my_referrals"
            )]
        ]
    )
    
    text = f"""ü§ù **–ü–∞—Ä—Ç–Ω—ë—Ä—ã**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['referral_count']} —á–µ–ª–æ–≤–µ–∫
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_stats['total_earnings']:.2f} ‚ÇΩ
üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
`{referral_link}`

üè™ **–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤** - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üìà **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞** - –∞–∫—Ç–∏–≤–Ω–∞

‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"""
    
    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

@dp.message(F.text == "üöÄ –†–∞–∑–≤–∏—Ç–∏–µ")
async def development_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –†–∞–∑–≤–∏—Ç–∏–µ"""
    await message.answer(
        "üöÄ **–†–∞–∑–≤–∏—Ç–∏–µ**\n\n"
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥—É\n"
        "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "üöÄ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n\n"
        "_–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_",
        parse_mode="Markdown"
    )

@dp.message(F.text == "üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥")
async def networking_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"""
    await message.answer(
        "üåê **–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥**\n\n"
        "üîç –ü–æ–∏—Å–∫ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
        "üí¨ –û–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "ü§ù –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π\n\n"
        "_–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –ø—Ä–∏–≤—ã—á–µ–∫
@dp.callback_query(F.data == "habits_menu")
async def habits_menu_callback(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫ (callback –≤–µ—Ä—Å–∏—è)"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    habits = db.get_user_habits(user_id, active_only=True)
    total_habits = len(habits)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_completed = 0
    for habit in habits:
        today_logs = db.get_habit_stats(user_id, habit['habit_id'], days=1)
        if today_logs.get('completed_count', 0) > 0:
            today_completed += 1
    
    stats_text = f"üìä –£ –≤–∞—Å {total_habits} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n"
    if total_habits > 0:
        stats_text += f"‚úÖ –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {today_completed}/{total_habits}"
    
    await callback.message.edit_text(
        f"üìÖ **–ü–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n{stats_text}",
        reply_markup=get_habits_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "add_habit")
async def add_habit_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã', '–ü—Ä–æ—á–∏—Ç–∞—Ç—å 10 —Å—Ç—Ä–∞–Ω–∏—Ü'):",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await state.set_state(HabitStates.waiting_for_habit_name)
    await callback.answer()

@dp.message(StateFilter(HabitStates.waiting_for_habit_name))
async def process_habit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_name = message.text.strip()
    
    if len(habit_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(habit_name=habit_name)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {habit_name}\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=None
    )
    await state.set_state(HabitStates.waiting_for_habit_description)

@dp.message(StateFilter(HabitStates.waiting_for_habit_description))
async def process_habit_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    description = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(habit_description=description)
    
    await message.answer(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏:",
        reply_markup=get_habit_type_keyboard()
    )
    await state.set_state(HabitStates.waiting_for_habit_type)

@dp.callback_query(StateFilter(HabitStates.waiting_for_habit_type))
async def process_habit_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_type_map = {
        "habit_type_daily": "daily",
        "habit_type_weekly": "weekly", 
        "habit_type_custom": "custom"
    }
    
    habit_type = habit_type_map.get(callback.data)
    await state.update_data(habit_type=habit_type)
    
    if habit_type == "custom":
        await callback.message.edit_text(
            "üîß –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å'):",
            reply_markup=None
        )
        await state.set_state(HabitStates.waiting_for_habit_frequency)
    else:
        # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
        await callback.message.edit_text(
            "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=get_habit_frequency_keyboard()
        )
        await state.set_state(HabitStates.waiting_for_habit_frequency)
    
    await callback.answer()

@dp.callback_query(StateFilter(HabitStates.waiting_for_habit_frequency))
async def process_habit_frequency_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏ (callback)"""
    frequency_map = {
        "freq_1": 1,
        "freq_2": 2,
        "freq_3": 3
    }
    
    if callback.data == "freq_custom":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        habit_type = data.get('habit_type', 'daily')
        
        if habit_type == 'daily':
            frequency_text = "üîß –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É —á–∏—Å–ª–æ–º (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å):"
        elif habit_type == 'weekly':
            frequency_text = "üîß –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É —á–∏—Å–ª–æ–º (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é):"
        else:
            frequency_text = "üîß –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —á–∞—Å—Ç–æ—Ç—É —á–∏—Å–ª–æ–º (—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é):"
        
        await callback.message.edit_text(
            frequency_text,
            reply_markup=None
        )
        await callback.answer()
        return
    
    frequency = frequency_map.get(callback.data, 1)
    await state.update_data(target_frequency=frequency)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    await finish_habit_creation(callback.message, state, callback.from_user.id)
    await callback.answer()

@dp.message(StateFilter(HabitStates.waiting_for_habit_frequency))
async def process_habit_frequency_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏ (—Ç–µ–∫—Å—Ç)"""
    try:
        frequency = int(message.text.strip())
        if frequency <= 0 or frequency > 10:
            await message.answer("‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    
    await state.update_data(target_frequency=frequency)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
    await finish_habit_creation(message, state, message.from_user.id)

async def finish_habit_creation(message, state: FSMContext, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.create_habit(
        user_id=user_id,
        habit_name=data['habit_name'],
        habit_description=data.get('habit_description'),
        habit_type=data.get('habit_type', 'daily'),
        target_frequency=data.get('target_frequency', 1)
    )
    
    if success:
        await message.answer(
            f"‚úÖ **–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['habit_name']}\n"
            f"üìÖ –¢–∏–ø: {data.get('habit_type', 'daily')}\n"
            f"üî¢ –ß–∞—Å—Ç–æ—Ç–∞: {data.get('target_frequency', 1)} —Ä–∞–∑\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏'.",
            reply_markup=get_habits_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_habits_menu_keyboard()
        )
    
    await state.clear()

@dp.callback_query(F.data == "my_habits")
async def show_my_habits(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    habits = db.get_user_habits(user_id, active_only=False)
    
    if not habits:
        await callback.message.edit_text(
            "üìÖ **–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!",
            reply_markup=get_habits_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"üìÖ **–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏** ({len(habits)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_habits_list_keyboard(habits),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("habit_detail_"))
async def show_habit_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≤—ã—á–∫–µ"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ
    habits = db.get_user_habits(user_id, active_only=False)
    habit = next((h for h in habits if h['habit_id'] == habit_id), None)
    
    if not habit:
        await callback.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_habit_stats(user_id, habit_id, days=30)
    
    status_emoji = "‚úÖ" if habit['is_active'] else "‚è∏Ô∏è"
    status_text = "–ê–∫—Ç–∏–≤–Ω–∞" if habit['is_active'] else "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    
    detail_text = f"""üìÖ **{habit['habit_name']}**

{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {habit['habit_description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üî¢ –ß–∞—Å—Ç–æ—Ç–∞: {habit['target_frequency']} —Ä–∞–∑ –≤ {habit['habit_type']}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π:**
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed_count', 0)} —Ä–∞–∑
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('completion_rate', 0):.1f}%
üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {stats.get('last_completion', '–ù–∏–∫–æ–≥–¥–∞')}"""
    
    await callback.message.edit_text(
        detail_text,
        reply_markup=get_habit_detail_keyboard(habit_id, habit['is_active']),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("habit_complete_"))
async def complete_habit(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.log_habit_completion(habit_id, user_id, completed=True)
    
    if success:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
        await stop_habit_reminders(user_id, habit_id)
        
        await callback.answer("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ
        await show_habit_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@dp.callback_query(F.data.startswith("habit_skip_"))
async def skip_habit(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.log_habit_completion(habit_id, user_id, completed=False)
    
    if success:
        await callback.answer("‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ
        await show_habit_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@dp.callback_query(F.data.startswith("habit_pause_"))
async def pause_habit(callback: types.CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.toggle_habit_status(habit_id, user_id)
    
    if success:
        await callback.answer("‚è∏Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        await show_habit_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

@dp.callback_query(F.data.startswith("habit_resume_"))
async def resume_habit(callback: types.CallbackQuery):
    """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.toggle_habit_status(habit_id, user_id)
    
    if success:
        await callback.answer("‚ñ∂Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        await show_habit_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

@dp.callback_query(F.data == "habits_stats")
async def show_habits_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º"""
    try:
        user_id = callback.from_user.id
        habits = db.get_user_habits(user_id, active_only=True)
        
        if not habits:
            await callback.message.edit_text(
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=get_habits_menu_keyboard(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        stats_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫**\n\n"
        
        total_completion_rate = 0
        for habit in habits:
            try:
                stats = db.get_habit_stats(user_id, habit['habit_id'], days=7)
                completion_rate = stats.get('completion_rate', 0)
                total_completion_rate += completion_rate
                
                stats_text += f"üìÖ {habit['habit_name']}\n"
                stats_text += f"   ‚úÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {completion_rate:.1f}%\n\n"
            except Exception as e:
                logger.error(f"Error getting stats for habit {habit['habit_id']}: {e}")
                stats_text += f"üìÖ {habit['habit_name']}\n"
                stats_text += f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n\n"
        
        avg_completion = total_completion_rate / len(habits) if habits else 0
        stats_text += f"üìà **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_completion:.1f}%**"
        
        await callback.message.edit_text(
            stats_text,
            reply_markup=get_habits_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in show_habits_stats: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        try:
            await callback.message.edit_text(
                "‚ùå **–û—à–∏–±–∫–∞**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–µ–∫.",
                reply_markup=get_habits_menu_keyboard(),
                parse_mode="Markdown"
            )
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@dp.callback_query(F.data == "calendar_menu")
async def calendar_menu_callback(callback: types.CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è (callback –≤–µ—Ä—Å–∏—è)"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
    from datetime import date, timedelta
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    today_events = db.get_user_events(user_id, start_date=today.isoformat(), end_date=today.isoformat())
    upcoming_events = db.get_user_events(user_id, start_date=tomorrow.isoformat(), end_date=(today + timedelta(days=7)).isoformat())
    
    stats_text = f"üìä –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_events)}\n"
    stats_text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (7 –¥–Ω–µ–π): {len(upcoming_events)}"
    
    await callback.message.edit_text(
        f"üìÜ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫**\n\n{stats_text}",
        reply_markup=get_calendar_menu_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "add_event")
async def add_event_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await state.set_state(CalendarStates.waiting_for_event_title)
    await callback.answer()

@dp.message(StateFilter(CalendarStates.waiting_for_event_title))
async def process_event_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    event_title = message.text.strip()
    
    if len(event_title) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(event_title=event_title)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_title}\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=None
    )
    await state.set_state(CalendarStates.waiting_for_event_description)

@dp.message(StateFilter(CalendarStates.waiting_for_event_description))
async def process_event_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    description = message.text.strip() if message.text.strip() != '-' else None
    await state.update_data(event_description=description)
    
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2025):",
        reply_markup=None
    )
    await state.set_state(CalendarStates.waiting_for_event_date)

@dp.message(StateFilter(CalendarStates.waiting_for_event_date))
async def process_event_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è"""
    date_text = message.text.strip()
    
    try:
        from datetime import datetime
        event_date = datetime.strptime(date_text, "%d.%m.%Y").date()
        await state.update_data(event_date=event_date.isoformat())
        
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤–∞–∂–Ω–æ:",
            reply_markup=None
        )
        await state.set_state(CalendarStates.waiting_for_event_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.07.2025)")

@dp.message(StateFilter(CalendarStates.waiting_for_event_time))
async def process_event_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è"""
    time_text = message.text.strip()
    
    if time_text == '-':
        await state.update_data(event_time=None)
    else:
        try:
            from datetime import datetime
            event_time = datetime.strptime(time_text, "%H:%M").time()
            await state.update_data(event_time=event_time.isoformat())
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            return
    
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=get_event_type_keyboard()
    )
    await state.set_state(CalendarStates.waiting_for_event_type)

@dp.callback_query(StateFilter(CalendarStates.waiting_for_event_type))
async def process_event_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    event_type_map = {
        "event_type_task": "task",
        "event_type_habit": "habit",
        "event_type_workout": "workout",
        "event_type_meal": "meal",
        "event_type_meeting": "meeting",
        "event_type_reminder": "reminder",
        "event_type_custom": "custom"
    }
    
    event_type = event_type_map.get(callback.data, "custom")
    await state.update_data(event_type=event_type)
    
    await callback.message.edit_text(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
        reply_markup=get_reminder_time_keyboard()
    )
    await state.set_state(CalendarStates.waiting_for_reminder_time)
    await callback.answer()

@dp.callback_query(StateFilter(CalendarStates.waiting_for_reminder_time))
async def process_reminder_time(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_map = {
        "reminder_5": 5,
        "reminder_15": 15,
        "reminder_30": 30,
        "reminder_60": 60,
        "reminder_1440": 1440,
        "reminder_none": None
    }
    
    reminder_minutes = reminder_map.get(callback.data)
    await state.update_data(reminder_minutes=reminder_minutes)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    await finish_event_creation(callback.message, state, callback.from_user.id)
    await callback.answer()

async def finish_event_creation(message, state: FSMContext, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º datetime –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    event_datetime = None
    if data.get('event_date'):
        if data.get('event_time'):
            event_datetime = f"{data['event_date']} {data['event_time']}"
        else:
            event_datetime = f"{data['event_date']} 00:00"
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.create_event(
        user_id=user_id,
        event_title=data['event_title'],
        event_description=data.get('event_description'),
        event_type=data.get('event_type', 'custom'),
        start_datetime=event_datetime,
        reminder_minutes=data.get('reminder_minutes')
    )
    
    if success:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        type_names = {
            'task': '–ó–∞–¥–∞—á–∞',
            'habit': '–ü—Ä–∏–≤—ã—á–∫–∞',
            'workout': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
            'meal': '–ü—Ä–∏–µ–º –ø–∏—â–∏',
            'meeting': '–í—Å—Ç—Ä–µ—á–∞',
            'reminder': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            'custom': '–î—Ä—É–≥–æ–µ'
        }
        
        reminder_text = ""
        if data.get('reminder_minutes'):
            if data['reminder_minutes'] >= 1440:
                reminder_text = f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {data['reminder_minutes'] // 1440} –¥–Ω."
            elif data['reminder_minutes'] >= 60:
                reminder_text = f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {data['reminder_minutes'] // 60} —á."
            else:
                reminder_text = f"\n‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {data['reminder_minutes']} –º–∏–Ω."
        
        await message.answer(
            f"‚úÖ **–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['event_title']}\n"
            f"üìÖ –î–∞—Ç–∞: {data.get('event_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {data.get('event_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìã –¢–∏–ø: {type_names.get(data.get('event_type'), '–î—Ä—É–≥–æ–µ')}"
            f"{reminder_text}",
            reply_markup=get_calendar_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_calendar_menu_keyboard()
        )
    
    await state.clear()

@dp.callback_query(F.data == "events_today")
async def show_events_today(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    user_id = callback.from_user.id
    from datetime import date
    today = date.today()
    
    events = db.get_user_events(user_id, start_date=today.isoformat(), end_date=today.isoformat())
    
    if not events:
        await callback.message.edit_text(
            f"üìÖ **–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')})**\n\n"
            "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.",
            reply_markup=get_calendar_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"üìÖ **–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')})** ({len(events)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_events_list_keyboard(events),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "events_week")
async def show_events_week(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    user_id = callback.from_user.id
    from datetime import date, timedelta
    today = date.today()
    week_end = today + timedelta(days=7)
    
    events = db.get_user_events(user_id, start_date=today.isoformat(), end_date=week_end.isoformat())
    
    if not events:
        await callback.message.edit_text(
            f"üìÜ **–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é**\n\n"
            "–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.",
            reply_markup=get_calendar_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"üìÜ **–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é** ({len(events)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_events_list_keyboard(events),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@dp.callback_query(F.data == "all_events")
async def show_all_events(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"""
    user_id = callback.from_user.id
    events = db.get_user_events(user_id)
    
    if not events:
        await callback.message.edit_text(
            "üìã **–í—Å–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
            reply_markup=get_calendar_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            f"üìã **–í—Å–µ —Å–æ–±—ã—Ç–∏—è** ({len(events)})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
            reply_markup=get_events_list_keyboard(events),
            parse_mode="Markdown"
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("event_detail_"))
async def show_event_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏"""
    event_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
    events = db.get_user_events(user_id)
    event = next((e for e in events if e['event_id'] == event_id), None)
    
    if not event:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    type_names = {
        'task': 'üìã –ó–∞–¥–∞—á–∞',
        'habit': 'üìÖ –ü—Ä–∏–≤—ã—á–∫–∞',
        'workout': 'üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        'meal': 'üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏',
        'meeting': 'ü§ù –í—Å—Ç—Ä–µ—á–∞',
        'reminder': '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        'custom': 'üìù –î—Ä—É–≥–æ–µ'
    }
    
    status_emoji = "‚úÖ" if event['status'] == 'completed' else "‚è≥"
    status_text = "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" if event['status'] == 'completed' else "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
    
    detail_text = f"""üìÖ **{event['event_title']}**

{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}
{type_names.get(event['event_type'], 'üìù –î—Ä—É–≥–æ–µ')}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event['event_description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –î–∞—Ç–∞: {event['start_datetime'][:10] if event['start_datetime'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚è∞ –í—Ä–µ–º—è: {event['start_datetime'][11:16] if event['start_datetime'] and len(event['start_datetime']) > 10 else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"""
    
    if event['reminder_minutes']:
        if event['reminder_minutes'] >= 1440:
            detail_text += f"\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {event['reminder_minutes'] // 1440} –¥–Ω."
        elif event['reminder_minutes'] >= 60:
            detail_text += f"\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {event['reminder_minutes'] // 60} —á."
        else:
            detail_text += f"\nüîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ {event['reminder_minutes']} –º–∏–Ω."
    
    await callback.message.edit_text(
        detail_text,
        reply_markup=get_event_detail_keyboard(event_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("event_complete_"))
async def complete_event(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ"""
    event_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.complete_event(event_id, user_id)
    
    if success:
        await callback.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        await show_event_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@dp.callback_query(F.data.startswith("event_cancel_"))
async def cancel_event(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
    event_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.delete_event(event_id, user_id)
    
    if success:
        await callback.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π
        await show_all_events(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global scheduler
    
    logger.info("Starting AlteriA bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.init_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = ReportScheduler(bot)
    scheduler.start()
    

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
from reminder_system import (
    start_habit_reminders, stop_habit_reminders, start_daily_reminder_check,
    ReminderStates, active_reminders
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("stop_reminders_"))
async def stop_reminders_handler(callback: types.CallbackQuery):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    await stop_habit_reminders(user_id, habit_id)
    
    await callback.message.edit_text(
        "‚è∏Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=None
    )
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.callback_query(F.data == "reminder_settings")
async def show_reminder_settings(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    settings = db.get_reminder_settings(user_id)
    
    interval_text = {
        300: "5 –º–∏–Ω—É—Ç",
        1200: "20 –º–∏–Ω—É—Ç",
        3600: "1 —á–∞—Å"
    }.get(settings['interval'], f"{settings['interval']//60} –º–∏–Ω—É—Ç")
    
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['is_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n" \
           f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n" \
           f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval_text}\n" \
           f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {settings['start_time']} - {settings['end_time']}\n\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", 
                callback_data="change_interval"
            )],
            [InlineKeyboardButton(
                text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", 
                callback_data="change_time_range"
            )],
            [InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not settings['is_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", 
                callback_data="toggle_reminders"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", 
                callback_data="close_settings"
            )]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(F.data == "change_interval")
async def change_reminder_interval(callback: types.CallbackQuery):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ö° –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç", callback_data="set_interval_300")],
            [InlineKeyboardButton(text="üïê –ö–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç", callback_data="set_interval_1200")],
            [InlineKeyboardButton(text="‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="set_interval_3600")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="reminder_settings")]
        ]
    )
    
    await callback.message.edit_text(
        "‚è±Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_interval_"))
async def set_reminder_interval(callback: types.CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    interval = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    success = db.update_reminder_settings(user_id, interval=interval)
    
    if success:
        interval_text = {
            300: "5 –º–∏–Ω—É—Ç",
            1200: "20 –º–∏–Ω—É—Ç",
            3600: "1 —á–∞—Å"
        }.get(interval, f"{interval//60} –º–∏–Ω—É—Ç")
        
        await callback.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: –∫–∞–∂–¥—ã–µ {interval_text}")
        await show_reminder_settings(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.callback_query(F.data == "change_time_range")
async def change_time_range(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await callback.message.edit_text(
        "üïê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00):",
        reply_markup=None,
        parse_mode="Markdown"
    )
    await state.set_state(ReminderStates.waiting_for_start_time)
    await callback.answer()

@dp.message(StateFilter(ReminderStates.waiting_for_start_time))
async def process_start_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text.strip(), "%H:%M")
        await state.update_data(start_time=message.text.strip())
        
        await message.answer(
            "‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22:00):"
        )
        await state.set_state(ReminderStates.waiting_for_end_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07:00)")

@dp.message(StateFilter(ReminderStates.waiting_for_end_time))
async def process_end_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text.strip(), "%H:%M")
        
        data = await state.get_data()
        start_time = data['start_time']
        end_time = message.text.strip()
        
        user_id = message.from_user.id
        success = db.update_reminder_settings(user_id, start_time=start_time, end_time=end_time)
        
        if success:
            await message.answer(
                f"‚úÖ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                f"üïê –° {start_time} –¥–æ {end_time}\n\n"
                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 22:00)")

@dp.callback_query(F.data == "toggle_reminders")
async def toggle_reminders(callback: types.CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = callback.from_user.id
    settings = db.get_reminder_settings(user_id)
    
    new_status = not settings['is_enabled']
    success = db.update_reminder_settings(user_id, is_enabled=new_status)
    
    if success:
        if new_status:
            await callback.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
        else:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keys_to_remove = []
            for key in active_reminders.keys():
                if key.startswith(f"{user_id}_"):
                    active_reminders[key].cancel()
                    keys_to_remove.append(key)
            
            for key in keys_to_remove:
                del active_reminders[key]
            
            await callback.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        await show_reminder_settings(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@dp.callback_query(F.data == "close_settings")
async def close_settings(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback.message.delete()
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(Command("test_reminders"))
async def test_reminders_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    habits = db.get_user_habits(user_id, active_only=True)
    
    if not habits:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
    test_habit = habits[0]
    habit_id = test_habit['habit_id']
    habit_name = test_habit['habit_name']
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    await start_habit_reminders(bot, db, user_id, habit_id)
    
    await message.answer(
        f"üîî **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–æ!**\n\n"
        f"üìÖ –ü—Ä–∏–≤—ã—á–∫–∞: {habit_name}\n"
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º\n"
        f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_test_reminders –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.",
        parse_mode="Markdown"
    )

@dp.message(Command("stop_test_reminders"))
async def stop_test_reminders_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys_to_remove = []
    for key in active_reminders.keys():
        if key.startswith(f"{user_id}_"):
            active_reminders[key].cancel()
            keys_to_remove.append(key)
    
    for key in keys_to_remove:
        del active_reminders[key]
    
    await message.answer("‚è∏Ô∏è –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@dp.message(Command("test_daily_report"))
async def test_daily_report_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º"""
    user_id = message.from_user.id
    
    try:
        from datetime import date, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        habits = db.get_user_habits(user_id, active_only=True)
        
        if not habits:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
            return
        
        user = db.get_user(user_id)
        first_name = user['first_name'] if user else "–î—Ä—É–≥"
        
        yesterday = date.today() - timedelta(days=1)
        
        report = f"üìä **–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∑–∞ {yesterday.strftime('%d.%m.%Y')}, {first_name}!**\n\n"
        
        total_expected = 0
        total_completed = 0
        
        for habit in habits:
            habit_id = habit['habit_id']
            habit_name = habit['habit_name']
            target_freq = habit['target_frequency']
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—á–µ—Ä–∞
            stats = db.get_habit_stats(user_id, habit_id, days=1, end_date=yesterday)
            completed = stats.get('completed_count', 0)
            
            total_expected += target_freq
            total_completed += completed
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completion_rate = (completed / target_freq * 100) if target_freq > 0 else 0
            
            # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if completion_rate >= 100:
                emoji = "‚úÖ"
            elif completion_rate >= 50:
                emoji = "üü°"
            else:
                emoji = "üî¥"
            
            report += f"{emoji} **{habit_name}**: {completed}/{target_freq} ({completion_rate:.0f}%)\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        overall_rate = (total_completed / total_expected * 100) if total_expected > 0 else 0
        
        report += f"\nüìà **–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç**: {total_completed}/{total_expected} ({overall_rate:.0f}%)\n\n"
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if overall_rate >= 100:
            report += "üéâ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**"
        elif overall_rate >= 80:
            report += "üëè **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!**"
        elif overall_rate >= 50:
            report += "üí™ **–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!**"
        else:
            report += "üî• **–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –í—ã –º–æ–∂–µ—Ç–µ –ª—É—á—à–µ!**"
        
        await message.answer(report, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in test_daily_report: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(Command("reminder_settings"))
async def reminder_settings_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_id = message.from_user.id
    settings = db.get_reminder_settings(user_id)
    
    interval_text = {
        300: "5 –º–∏–Ω—É—Ç",
        1200: "20 –º–∏–Ω—É—Ç",
        3600: "1 —á–∞—Å"
    }.get(settings['interval'], f"{settings['interval']//60} –º–∏–Ω—É—Ç")
    
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings['is_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
    
    text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n" \
           f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n" \
           f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval_text}\n" \
           f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {settings['start_time']} - {settings['end_time']}\n\n" \
           f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", 
                callback_data="change_interval"
            )],
            [InlineKeyboardButton(
                text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", 
                callback_data="change_time_range"
            )],
            [InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not settings['is_enabled'] else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", 
                callback_data="toggle_reminders"
            )]
        ]
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        db.create_reminder_settings_table()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(start_daily_reminder_check(bot, db))
        
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query(F.data == "profile")
async def profile_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –í–∏–∑–∏—Ç–∫–∞ –∏–∑ –º–µ–Ω—é"""
    user_profile = db.get_profile(callback.from_user.id)
    
    if user_profile and user_profile.get('generated_card'):
        await callback.message.edit_text(
            "üìã **–í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞:**\n\n" + user_profile['generated_card'],
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–∑–∏—Ç–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
        )
    await callback.answer()

@dp.callback_query(F.data == "networking")
async def networking_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –∏–∑ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üåê **–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥**\n\n"
        "ü§ù –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
        "üì± –û–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
        "üéØ –î–µ–ª–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏\n\n"
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    )
    await callback.answer()

@dp.callback_query(F.data == "organizer")
async def organizer_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –∏–∑ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã **–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä**\n\n"
        "üìù –ó–∞–º–µ—Ç–∫–∏\n"
        "üìã –°–ø–∏—Å–∫–∏ –¥–µ–ª\n"
        "üìä –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    )
    await callback.answer()

@dp.callback_query(F.data == "calendar")
async def calendar_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏–∑ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìÜ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å**\n\n"
        "üìÖ –°–æ–±—ã—Ç–∏—è\n"
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üóìÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
    )
    await callback.answer()

@dp.callback_query(F.data == "settings")
async def settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="reminder_settings")],
            [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
            [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫", callback_data="language_settings")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="close_settings")]
        ]
    )
    
    await callback.message.edit_text(
        "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "notification_settings")
async def notification_settings_callback(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\n\n"
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ]
        )
    )
    await callback.answer()

@dp.callback_query(F.data == "language_settings")
async def language_settings_callback(callback: types.CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    await callback.message.edit_text(
        "üåç **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞**\n\n"
        "üá∑üá∫ –†—É—Å—Å–∫–∏–π (—Ç–µ–∫—É—â–∏–π)\n"
        "üá∫üá∏ English\n\n"
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="settings")]
            ]
        )
    )
    await callback.answer()


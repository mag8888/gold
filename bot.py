import os
import openai
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

logging.basicConfig(level=logging.INFO)

# Load env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
CREDS_PATH = os.getenv("GOOGLE_SHEETS_CREDS")

# OpenAI
openai.api_key = OPENAI_API_KEY

# Telegram bot init
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Google Sheets init
gscope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_PATH, gscope)
client = gspread.authorize(creds)
main_sheet = client.open_by_key(SPREADSHEET_ID)

# Worksheets
onboard_ws = main_sheet.worksheet("Onboarding")
participants_ws = main_sheet.worksheet("Participants")

# FSM States
class Onboarding(StatesGroup):
    step = State()  # track progress
    name = State()
    surname = State()
    about = State()
    product = State()
    cases = State()
    why_net = State()
    values = State()
    goals = State()
    lifestyle = State()
    social = State()

# Main menu keyboard
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìÅ –ú–µ–Ω—é"), KeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—ã")],
        [KeyboardButton("üéØ –ú–æ–∏ —Ü–µ–ª–∏")],
        [KeyboardButton("üÜî –í–∏–∑–∏—Ç–∫–∞"), KeyboardButton("üéì –û–±—É—á–µ–Ω–∏–µ")],
        [KeyboardButton("üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥")]
    ], resize_keyboard=True
)

# Start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # send 4 images (IDs or URLs)
    for img in ["img1.jpg","img2.jpg","img3.jpg","img4.jpg"]:
        await bot.send_photo(message.chat.id, img)
    # greet
    full_name = message.from_user.full_name
    text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {full_name}!\n–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É?"
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="vb_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="vb_no")
    )
    await message.answer(text, reply_markup=kb)

@dp.callback_query(lambda c: c.data in ["vb_yes","vb_no"])
async def process_vb_choice(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if c.data == "vb_no":
        await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)
    else:
        # start onboarding
        await c.message.answer(f"1/10. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.update_data(step=1)
        await Onboarding.name.set()

# Onboarding handlers with progress
async def ask_next(message: types.Message, state: FSMContext, next_state: State, prompt: str):
    data = await state.get_data()
    step = data.get("step", 0)
    step += 1
    await state.update_data(step=step)
    await message.answer(f"{step}/10. {prompt}")
    await next_state.set()

@dp.message(Onboarding.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await ask_next(message, state, Onboarding.surname, "–í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é:")

@dp.message(Onboarding.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await ask_next(message, state, Onboarding.about, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è:")

@dp.message(Onboarding.about)
async def process_about(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await ask_next(message, state, Onboarding.product, "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç? –ï—Å–ª–∏ –¥–∞, –∫–∞–∫–æ–π:")

@dp.message(Onboarding.product)
async def process_product(message: types.Message, state: FSMContext):
    await state.update_data(product=message.text)
    await ask_next(message, state, Onboarding.cases, "–û–ø–∏—à–∏ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –∫–µ–π—Å—ã:")

@dp.message(Onboarding.cases)
async def process_cases(message: types.Message, state: FSMContext):
    await state.update_data(cases=message.text)
    await ask_next(message, state, Onboarding.why_net, "–ó–∞—á–µ–º —Ç–µ–±–µ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥?:")

@dp.message(Onboarding.why_net)
async def process_why(message: types.Message, state: FSMContext):
    await state.update_data(why_net=message.text)
    await ask_next(message, state, Onboarding.values, "–¢–æ–ø-3 —Ç–≤–æ–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π:")

@dp.message(Onboarding.values)
async def process_values(message: types.Message, state: FSMContext):
    await state.update_data(values=message.text)
    await ask_next(message, state, Onboarding.goals, "–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?")

@dp.message(Onboarding.goals)
async def process_goals(message: types.Message, state: FSMContext):
    await state.update_data(goals=message.text)
    await ask_next(message, state, Onboarding.lifestyle, "–ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –≤–µ–¥—ë—à—å? (—Å–ø–æ—Ä—Ç, –π–æ–≥–∞...)")

@dp.message(Onboarding.lifestyle)
async def process_lifestyle(message: types.Message, state: FSMContext):
    await state.update_data(lifestyle=message.text)
    await ask_next(message, state, Onboarding.social, "–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram (–∏–ª–∏ —Å–æ—Ü—Å–µ—Ç—å):")

@dp.message(Onboarding.social)
async def process_social(message: types.Message, state: FSMContext):
    await state.update_data(social=message.text)
    data = await state.get_data()
    # call GPT for card generation
    prompt = ("–°—Ñ–æ—Ä–º–∏—Ä—É–π –≤–∏–∑–∏—Ç–∫—É –≤ Markdown –ø–æ –¥–∞–Ω–Ω—ã–º: " + str(data))
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role":"system","content":"–¢—ã –¥–µ–ª–∞–µ—à—å –≤–∏–∑–∏—Ç–∫—É."},
                  {"role":"user","content":prompt}]
    )
    card = resp.choices[0].message.content
    await message.answer(card, parse_mode="Markdown")
    # save raw data
    participants_ws.append_row([message.from_user.id, message.from_user.username] + 
                                [data[k] for k in ["name","surname","about","product","cases","why_net","values","goals","lifestyle","social"]] +
                                [datetime.utcnow().isoformat()])
    # show management buttons
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_card"),
        InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regen_card")
    )
    kb.add(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_card"),
        InlineKeyboardButton("üîô –ú–µ–Ω—é", callback_data="menu")
    )
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb)
    await state.clear()

# Worksheets for categories/history (ensure these sheets exist)
categories_ws = main_sheet.worksheet("Categories")

# Callback handlers for card management
@dp.callback_query(lambda c: c.data == "save_card")
async def handle_save_card(c: CallbackQuery):
    await c.answer()
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("üë§ –ö–æ—É—á", callback_data="cat:–ö–æ—É—á"),
        InlineKeyboardButton("‚ö° –≠–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫", callback_data="cat:–≠–Ω–µ—Ä–≥–æ–ø—Ä–∞–∫—Ç–∏–∫"),
        InlineKeyboardButton("üß† –ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="cat:–ü—Å–∏—Ö–æ–ª–æ–≥")
    )
    await c.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–≤–æ–µ–π –≤–∏–∑–∏—Ç–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("cat:"))
async def handle_category_select(c: CallbackQuery):
    await c.answer()
    category = c.data.split(':',1)[1]
    user = c.from_user
    # save category selection
    categories_ws.append_row([
        user.id,
        user.username,
        category,
        datetime.utcnow().isoformat()
    ])
    await c.message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

@dp.callback_query(lambda c: c.data == "regen_card")
async def handle_regen_card(c: CallbackQuery):
    await c.answer()
    await c.message.answer("‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

@dp.callback_query(lambda c: c.data == "edit_card")
async def handle_edit_card(c: CallbackQuery):
    await c.answer()
    await c.message.answer("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–∑–∏—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

@dp.callback_query(lambda c: c.data == "menu")
async def handle_menu(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)


if __name__ == "__main__":
    dp.run_polling(bot)
```

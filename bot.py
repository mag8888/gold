
bot.py
import asyncio
import logging
import os
from datetime import datetime, date
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from database import db
from openai_service import openai_service
from google_sheets import sheets_manager
from scheduler import ReportScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OnboardingStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_bio = State()
    waiting_for_product = State()
    waiting_for_cases = State()
    waiting_for_motivation = State()
    waiting_for_values = State()
    waiting_for_goals = State()
    waiting_for_lifestyle = State()
    waiting_for_social = State()

class GoalStates(StatesGroup):
    waiting_for_goals_input = State()
    waiting_for_goal_type = State()
    waiting_for_goal_update = State()

class EditStates(StatesGroup):
    waiting_for_manual_edit = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã"), KeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏")],
            [KeyboardButton(text="üÜî –í–∏–∑–∏—Ç–∫–∞"), KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"), KeyboardButton(text="üìÅ –ú–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

def get_yes_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no")
            ]
        ]
    )
    return keyboard

def get_card_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_card")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_card")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_card")],
            [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = db.get_categories()
    keyboard_buttons = []
    
    for category in categories:
        button = InlineKeyboardButton(
            text=f"{category['category_emoji']} {category['category_name']}",
            callback_data=f"category_{category['category_id']}"
        )
        keyboard_buttons.append([button])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="goal_type_daily")],
            [InlineKeyboardButton(text="üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ", callback_data="goal_type_monthly")]
        ]
    )
    return keyboard

def get_goals_keyboard(goals, goal_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    keyboard_buttons = []
    
    for i, goal in enumerate(goals):
        emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
        text = f"{emoji} {goal['goal_text'][:30]}..."
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"update_goal_{goal['goal_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_status_keyboard(goal_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"goal_complete_{goal_id}")],
            [InlineKeyboardButton(text="‚ö°Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"goal_progress_{goal_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.get_user(user_id)
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.create_user(user_id, first_name, last_name, username)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SynergyNet - —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ª—é–¥–µ–π! üöÄ\n\n–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É?"
        
        await message.answer(
            welcome_text,
            reply_markup=get_yes_no_keyboard()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user['onboarding_completed']:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏!",
                reply_markup=get_yes_no_keyboard()
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
    )
    
    await message.answer(
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=None
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()

@dp.message(StateFilter(AdminStates.waiting_for_broadcast_message))
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    progress_msg = await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    sent_count, failed_count = await scheduler.send_broadcast_message(broadcast_text)
    
    await progress_msg.edit_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )
    
    await state.clear()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_users = db.get_all_active_users()
    total_users = len(all_users)
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_users}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: 0

üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=None,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "yes")
async def start_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É.\n\n1/10. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(OnboardingStates.waiting_for_first_name)
    await callback.answer()

@dp.callback_query(F.data == "no")
async def skip_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç–∫—É –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=None
    )
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SynergyNet! üéâ",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
@dp.message(StateFilter(OnboardingStates.waiting_for_first_name))
async def process_first_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(first_name=message.text)
    await message.answer("2/10. –í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é.")
    await state.set_state(OnboardingStates.waiting_for_last_name)

@dp.message(StateFilter(OnboardingStates.waiting_for_last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    await state.update_data(last_name=message.text)
    await message.answer("3/10. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ).")
    await state.set_state(OnboardingStates.waiting_for_bio)

@dp.message(StateFilter(OnboardingStates.waiting_for_bio))
async def process_bio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    await state.update_data(bio=message.text)
    await message.answer("4/10. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äì –∫–∞–∫–æ–π.")
    await state.set_state(OnboardingStates.waiting_for_product)

@dp.message(StateFilter(OnboardingStates.waiting_for_product))
async def process_product(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    await state.update_data(product_info=message.text)
    await message.answer("5/10. –û–ø–∏—à–∏ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –∫–µ–π—Å—ã.")
    await state.set_state(OnboardingStates.waiting_for_cases)

@dp.message(StateFilter(OnboardingStates.waiting_for_cases))
async def process_cases(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ–π—Å–æ–≤"""
    await state.update_data(case_studies=message.text)
    await message.answer("6/10. –ó–ê–ß–ï–ú —Ç–µ–±–µ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥?")
    await state.set_state(OnboardingStates.waiting_for_motivation)

@dp.message(StateFilter(OnboardingStates.waiting_for_motivation))
async def process_motivation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    await state.update_data(networking_motive=message.text)
    await message.answer("7/10. –¢–æ–ø-3 —Ç–≤–æ–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–∏.")
    await state.set_state(OnboardingStates.waiting_for_values)

@dp.message(StateFilter(OnboardingStates.waiting_for_values))
async def process_values(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    await state.update_data(life_values=message.text)
    await message.answer("8/10. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É —Ç–µ–±—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?")
    await state.set_state(OnboardingStates.waiting_for_goals)

@dp.message(StateFilter(OnboardingStates.waiting_for_goals))
async def process_goals(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–π"""
    await state.update_data(goals=message.text)
    await message.answer("9/10. –ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Ç—ã –≤–µ–¥—ë—à—å? (—Å–ø–æ—Ä—Ç, –π–æ–≥–∞, –º–µ–¥–∏—Ç–∞—Ü–∏–∏‚Ä¶)")
    await state.set_state(OnboardingStates.waiting_for_lifestyle)

@dp.message(StateFilter(OnboardingStates.waiting_for_lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"""
    await state.update_data(lifestyle=message.text)
    await message.answer("10/10. –°—Å—ã–ª–∫–∞ –Ω–∞ Instagram (–∏–ª–∏ –¥—Ä—É–≥—É—é —Å–æ—Ü—Å–µ—Ç—å).")
    await state.set_state(OnboardingStates.waiting_for_social)

@dp.message(StateFilter(OnboardingStates.waiting_for_social))
async def process_social_and_generate_card(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    await state.update_data(social_link=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç–∫—É —á–µ—Ä–µ–∑ OpenAI
    business_card = openai_service.generate_business_card(data)
    
    if business_card:
        await progress_msg.delete()
        await message.answer(
            "üéâ –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" + business_card,
            reply_markup=get_card_management_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(generated_card=business_card)
    else:
        await progress_msg.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π
@dp.callback_query(F.data == "save_card")
async def save_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    profile_data = {
        'bio': data.get('bio'),
        'product_info': data.get('product_info'),
        'case_studies': data.get('case_studies'),
        'networking_motive': data.get('networking_motive'),
        'life_values': data.get('life_values'),
        'lifestyle': data.get('lifestyle'),
        'social_link': data.get('social_link'),
        'generated_card': data.get('generated_card')
    }
    
    if db.save_profile(callback.from_user.id, profile_data):
        # –û—Ç–º–µ—á–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        db.complete_onboarding(callback.from_user.id)
        
        await callback.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=get_categories_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    category_id = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = db.get_categories()
    selected_category = next((cat for cat in categories if str(cat['category_id']) == category_id), None)
    
    if selected_category:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        user_profile = db.get_profile(callback.from_user.id)
        if user_profile:
            user_profile['category'] = selected_category['category_name']
            db.save_profile(callback.from_user.id, user_profile)
        
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_category['category_emoji']} {selected_category['category_name']}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SynergyNet! üéâ",
            reply_markup=None
        )
        
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "regenerate_card")
async def regenerate_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    progress_msg = await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∏–∑–∏—Ç–∫–∏...")
    
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç–∫—É
    new_card = openai_service.regenerate_business_card(data, data.get('generated_card', ''))
    
    if new_card:
        await progress_msg.edit_text(
            "üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–∑–∏—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!\n\n" + new_card,
            reply_markup=get_card_management_keyboard(),
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(generated_card=new_card)
    else:
        await progress_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–∏–∑–∏—Ç–∫–∏.",
            reply_markup=get_card_management_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "edit_card")
async def edit_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏:",
        reply_markup=None
    )
    await state.set_state(EditStates.waiting_for_manual_edit)
    await callback.answer()

@dp.message(StateFilter(EditStates.waiting_for_manual_edit))
async def process_manual_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    new_card = message.text
    await state.update_data(generated_card=new_card)
    
    await message.answer(
        "‚úÖ –í–∏–∑–∏—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + new_card,
        reply_markup=get_card_management_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(None)

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìÅ –ú–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üÜî –í–∏–∑–∏—Ç–∫–∞")
async def show_business_card(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–∏–∑–∏—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_profile = db.get_profile(message.from_user.id)
    
    if user_profile and user_profile.get('generated_card'):
        await message.answer(
            "üìã –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞:\n\n" + user_profile['generated_card'],
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–∑–∏—Ç–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_yes_no_keyboard()
        )

@dp.message(F.text == "üéØ –ú–æ–∏ —Ü–µ–ª–∏")
async def show_goals_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await message.answer(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "goals_menu")
async def show_goals_menu_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏ (callback –≤–µ—Ä—Å–∏—è)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await callback.message.edit_text(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "add_goals")
async def add_goals_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ —Å–ø–∏—Å–∫–æ–º (–∫–∞–∂–¥–∞—è —Ü–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
        reply_markup=None
    )
    await state.set_state(GoalStates.waiting_for_goals_input)
    await callback.answer()

@dp.message(StateFilter(GoalStates.waiting_for_goals_input))
async def process_goals_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π"""
    goals_text = message.text.strip()
    goals_list = [goal.strip() for goal in goals_text.split('\n') if goal.strip()]
    
    if not goals_list:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å.")
        return
    
    await state.update_data(goals_list=goals_list)
    await message.answer(
        f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–ª–µ–π: {len(goals_list)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π:",
        reply_markup=get_goal_type_keyboard()
    )
    await state.set_state(GoalStates.waiting_for_goal_type)

@dp.callback_query(F.data.startswith("goal_type_"))
async def process_goal_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""
    goal_type = callback.data.split("_")[2]  # daily –∏–ª–∏ monthly
    data = await state.get_data()
    goals_list = data.get('goals_list', [])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_count = 0
    for goal_text in goals_list:
        goal_id = db.add_goal(
            user_id=callback.from_user.id,
            goal_text=goal_text,
            goal_type=goal_type,
            due_date=date.today() if goal_type == 'daily' else None
        )
        if goal_id:
            saved_count += 1
    
    type_text = "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ" if goal_type == "daily" else "–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ"
    await callback.message.edit_text(
        f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} {type_text} —Ü–µ–ª–µ–π!",
        reply_markup=None
    )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "show_daily_goals")
async def show_daily_goals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='daily',
        date_filter=date.today()
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏'",
            reply_markup=None
        )
    else:
        goals_text = "üìÖ **–ú–æ–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
        for goal in goals:
            emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
            goals_text += f"{emoji} {goal['goal_text']}\n"
        
        await callback.message.edit_text(
            goals_text,
            parse_mode="Markdown",
            reply_markup=None
        )
    
    await callback.answer()

@dp.callback_query(F.data == "show_monthly_goals")
async def show_monthly_goals(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='monthly'
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü.\n\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏'",
            reply_markup=None
        )
    else:
        goals_text = "üìÜ **–ú–æ–∏ —Ü–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü:**\n\n"
        for goal in goals:
            emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
            goals_text += f"{emoji} {goal['goal_text']}\n"
        
        await callback.message.edit_text(
            goals_text,
            parse_mode="Markdown",
            reply_markup=None
        )
    
    await callback.answer()

@dp.callback_query(F.data == "update_goals")
async def update_goals_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –û–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="update_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –û–±–Ω–æ–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ", callback_data="update_monthly_goals")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]
        ]
    )
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "update_daily_goals")
async def update_daily_goals(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='daily',
        date_filter=date.today()
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=get_goals_keyboard(goals, 'daily')
        )
    
    await callback.answer()

@dp.callback_query(F.data == "update_monthly_goals")
async def update_monthly_goals(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    goals = db.get_user_goals(
        user_id=callback.from_user.id,
        goal_type='monthly'
    )
    
    if not goals:
        await callback.message.edit_text(
            "üìÜ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –Ω–∞ –º–µ—Å—è—Ü.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=get_goals_keyboard(goals, 'monthly')
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("update_goal_"))
async def select_goal_for_update(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    goal_id = int(callback.data.split("_")[2])
    
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ü–µ–ª–∏:",
        reply_markup=get_goal_status_keyboard(goal_id)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_complete_"))
async def complete_goal(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ —Ü–µ–ª–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
    goal_id = int(callback.data.split("_")[2])
    
    if db.update_goal_status(goal_id, 'completed'):
        await callback.message.edit_text(
            "‚úÖ –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("goal_progress_"))
async def set_goal_in_progress(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∫–∞ —Ü–µ–ª–∏ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    goal_id = int(callback.data.split("_")[2])
    
    if db.update_goal_status(goal_id, 'in_progress'):
        await callback.message.edit_text(
            "‚ö°Ô∏è –¶–µ–ª—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Ü–µ–ª—è–º", callback_data="goals_menu")]]
            )
        )
    
    await callback.answer()

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–Ω—é
@dp.message(F.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã")
async def partners_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü–∞—Ä—Ç–Ω—ë—Ä—ã"""
    referral_stats = db.get_referral_stats(message.from_user.id)
    
    text = f"""ü§ù **–ü–∞—Ä—Ç–Ω—ë—Ä—ã**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['referral_count']} —á–µ–ª–æ–≤–µ–∫
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referral_stats['total_earnings']:.2f} ‚ÇΩ
üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: `{referral_stats['referral_code']}`

üè™ **–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤** - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üìà **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞** - –∞–∫—Ç–∏–≤–Ω–∞"""
    
    await message.answer(text, parse_mode="Markdown")

@dp.message(F.text == "üéì –û–±—É—á–µ–Ω–∏–µ")
async def education_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –û–±—É—á–µ–Ω–∏–µ"""
    await message.answer(
        "üéì **–û–±—É—á–µ–Ω–∏–µ**\n\n"
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥—É\n"
        "üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
        "üöÄ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n\n"
        "_–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_",
        parse_mode="Markdown"
    )

@dp.message(F.text == "üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥")
async def networking_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"""
    await message.answer(
        "üåê **–ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥**\n\n"
        "üîç –ü–æ–∏—Å–∫ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
        "üí¨ –û–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "ü§ù –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π\n\n"
        "_–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_",
        parse_mode="Markdown"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global scheduler
    
    logger.info("Starting SynergyNet bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.init_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = ReportScheduler(bot)
    scheduler.start()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if scheduler:
            scheduler.stop()

if __name__ == "__main__":
    asyncio.run(main())

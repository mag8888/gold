import asyncio
import logging
import sqlite3
from datetime import datetime, date
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
import os

from database import Database
from openai_service import OpenAIService
from scheduler import ReportScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CORRECT_BOT_USERNAME = "Alteria_8_bot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN not found in environment variables")
    raise ValueError("BOT_TOKEN is required")

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OnboardingStates(StatesGroup):
    waiting_for_first_name = State()
    waiting_for_last_name = State()
    waiting_for_bio = State()
    waiting_for_product = State()
    waiting_for_cases = State()
    waiting_for_motivation = State()
    waiting_for_values = State()
    waiting_for_goals = State()
    waiting_for_lifestyle = State()
    waiting_for_social = State()

class GoalStates(StatesGroup):
    waiting_for_goals_input = State()
    waiting_for_goal_type = State()
    waiting_for_goal_update = State()

class EditStates(StatesGroup):
    waiting_for_manual_edit = State()

class AdminStates(StatesGroup):
    waiting_for_broadcast_message = State()

class HabitStates(StatesGroup):
    waiting_for_habit_name = State()
    waiting_for_habit_description = State()
    waiting_for_habit_type = State()
    waiting_for_habit_frequency = State()
    waiting_for_habit_reminder = State()
    waiting_for_habit_notes = State()

class CalendarStates(StatesGroup):
    waiting_for_event_title = State()
    waiting_for_event_description = State()
    waiting_for_event_date = State()
    waiting_for_event_time = State()
    waiting_for_event_type = State()
    waiting_for_reminder_time = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã"), KeyboardButton(text="üéØ –ú–æ–∏ —Ü–µ–ª–∏")],
            [KeyboardButton(text="üÜî –í–∏–∑–∏—Ç–∫–∞"), KeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="üåê –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥"), KeyboardButton(text="üìÖ –ü—Ä–∏–≤—ã—á–∫–∏")],
            [KeyboardButton(text="üìã –û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä"), KeyboardButton(text="üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")],
            [KeyboardButton(text="üìÅ –ú–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

def get_yes_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="no")
            ]
        ]
    )
    return keyboard

def get_card_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_card")],
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate_card")],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_card")],
            [InlineKeyboardButton(text="üîô –ú–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_categories_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    categories = db.get_categories()
    keyboard_buttons = []
    
    for category in categories:
        button = InlineKeyboardButton(
            text=f"{category['category_emoji']} {category['category_name']}",
            callback_data=f"category_{category['category_id']}"
        )
        keyboard_buttons.append([button])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", callback_data="goal_type_daily")],
            [InlineKeyboardButton(text="üìÜ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ", callback_data="goal_type_monthly")]
        ]
    )
    return keyboard

def get_goals_keyboard(goals, goal_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    keyboard_buttons = []
    
    for i, goal in enumerate(goals):
        emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
        text = f"{emoji} {goal['goal_text'][:30]}..."
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"update_goal_{goal['goal_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_goal_status_keyboard(goal_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ü–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"goal_complete_{goal_id}")],
            [InlineKeyboardButton(text="‚ö°Ô∏è –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data=f"goal_progress_{goal_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="goals_menu")]
        ]
    )
    return keyboard

def get_habits_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="my_habits")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="habits_stats")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_habit_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è", callback_data="habit_type_daily")],
            [InlineKeyboardButton(text="üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è", callback_data="habit_type_weekly")],
            [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è", callback_data="habit_type_custom")]
        ]
    )
    return keyboard

def get_habits_list_keyboard(habits):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard_buttons = []
    
    for habit in habits:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        from datetime import date
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        habit_stats = db.get_habit_stats(habit['user_id'], habit['habit_id'], days=1)
        completed_today = habit_stats.get('completed_count', 0) or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        target_frequency = habit.get('target_frequency', 1) or 1  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–ª–Ω–∏–µ–π –∏ –≥–∞–ª–æ—á–∫–æ–π –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if habit['is_active']:
            # –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            text = f"{target_frequency} ‚ö° {habit['habit_name']} ‚úÖ {completed_today}"
            status_emoji = "üü¢" if completed_today >= target_frequency else "üü°"
        else:
            text = f"‚è∏Ô∏è {habit['habit_name']}"
            status_emoji = "‚è∏Ô∏è"
        button = InlineKeyboardButton(
            text=text,
            callback_data=f"habit_detail_{habit['habit_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_habit"),
        InlineKeyboardButton(text="üìä –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_habit_detail_keyboard(habit_id, is_active=True):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"habit_complete_{habit_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"habit_skip_{habit_id}")
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if is_active:
        keyboard_buttons.append([InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"habit_pause_{habit_id}")])
    else:
        keyboard_buttons.append([InlineKeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"habit_resume_{habit_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"habit_stats_{habit_id}"),
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="my_habits")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_habit_frequency_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ –¥–µ–Ω—å", callback_data="freq_1")],
            [InlineKeyboardButton(text="2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_2")],
            [InlineKeyboardButton(text="3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", callback_data="freq_3")],
            [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="freq_custom")]
        ]
    )
    return keyboard

def get_calendar_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="add_event")],
            [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è —Å–µ–≥–æ–¥–Ω—è", callback_data="events_today")],
            [InlineKeyboardButton(text="üìÜ –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="events_week")],
            [InlineKeyboardButton(text="üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="all_events")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    return keyboard

def get_event_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ó–∞–¥–∞—á–∞", callback_data="event_type_task")],
            [InlineKeyboardButton(text="üìÖ –ü—Ä–∏–≤—ã—á–∫–∞", callback_data="event_type_habit")],
            [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="event_type_workout")],
            [InlineKeyboardButton(text="üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏", callback_data="event_type_meal")],
            [InlineKeyboardButton(text="ü§ù –í—Å—Ç—Ä–µ—á–∞", callback_data="event_type_meeting")],
            [InlineKeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="event_type_reminder")],
            [InlineKeyboardButton(text="üìù –î—Ä—É–≥–æ–µ", callback_data="event_type_custom")]
        ]
    )
    return keyboard

def get_reminder_time_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞ 5 –º–∏–Ω—É—Ç", callback_data="reminder_5")],
            [InlineKeyboardButton(text="–ó–∞ 15 –º–∏–Ω—É—Ç", callback_data="reminder_15")],
            [InlineKeyboardButton(text="–ó–∞ 30 –º–∏–Ω—É—Ç", callback_data="reminder_30")],
            [InlineKeyboardButton(text="–ó–∞ 1 —á–∞—Å", callback_data="reminder_60")],
            [InlineKeyboardButton(text="–ó–∞ 1 –¥–µ–Ω—å", callback_data="reminder_1440")],
            [InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_none")]
        ]
    )
    return keyboard

def get_events_list_keyboard(events):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π"""
    keyboard_buttons = []
    
    for event in events:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        start_time = event['start_datetime'][:16] if event['start_datetime'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        type_emoji = {
            'task': 'üìã',
            'habit': 'üìÖ', 
            'workout': 'üí™',
            'meal': 'üçΩÔ∏è',
            'meeting': 'ü§ù',
            'reminder': '‚è∞',
            'custom': 'üìù'
        }.get(event['event_type'], 'üìù')
        
        text = f"{type_emoji} {event['event_title']} ({start_time})"
        button = InlineKeyboardButton(
            text=text[:50] + "..." if len(text) > 50 else text,
            callback_data=f"event_detail_{event['event_id']}"
        )
        keyboard_buttons.append([button])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_event"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="calendar_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    return keyboard

def get_event_detail_keyboard(event_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"event_complete_{event_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_cancel_{event_id}")],
            [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="all_events")]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    username = message.from_user.username
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    logger.info(f"START command received: user_id={user_id}, text='{message.text}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
    referral_code = None
    if message.text and len(message.text.split()) > 1:
        start_param = message.text.split()[1]
        logger.info(f"Start parameter: '{start_param}'")
        if start_param.startswith('REF_'):
            referral_code = start_param
            logger.info(f"Referral code found: '{referral_code}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.get_user(user_id)
    logger.info(f"User exists in DB: {user is not None}")
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrer_id = None
        if referral_code:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            referrer = db.get_user_by_referral_code(referral_code)
            logger.info(f"Referrer found: {referrer}")
            if referrer:
                referrer_id = referrer['user_id']
                logger.info(f"Referrer ID: {referrer_id}")
        
        db.create_user(user_id, first_name, last_name, username, referrer_id)
        logger.info(f"New user created with referrer_id: {referrer_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if referrer_id:
            try:
                await bot.send_message(
                    referrer_id, 
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name}!"
                )
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è! üöÄ\n\n–•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤–∏–∑–∏—Ç–∫—É?"
        
        await message.answer(
            welcome_text,
            reply_markup=get_yes_no_keyboard()
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if user['onboarding_completed']:
            await message.answer(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {first_name}! üëã",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏!",
                reply_markup=get_yes_no_keyboard()
            )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é)
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    if message.from_user.id not in admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")]
        ]
    )
    
    await message.answer(
        "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "admin_broadcast")
async def admin_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await callback.message.edit_text(
        "üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=None
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)
    await callback.answer()

@dp.message(StateFilter(AdminStates.waiting_for_broadcast_message))
async def process_broadcast_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_text = message.text
    
    progress_msg = await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    sent_count, failed_count = await scheduler.send_broadcast_message(broadcast_text)
    
    await progress_msg.edit_text(
        f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}"
    )
    
    await state.clear()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_users = db.get_all_active_users()
    total_users = len(all_users)
    
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {total_users}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: 0

üìÖ –°–µ–≥–æ–¥–Ω—è: {datetime.now().strftime('%d.%m.%Y')}"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=None,
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "yes")
async def start_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É.\n\n1/10. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(OnboardingStates.waiting_for_first_name)
    await callback.answer()

@dp.callback_query(F.data == "no")
async def skip_onboarding(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞"""
    await callback.message.edit_text(
        "–•–æ—Ä–æ—à–æ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑–∏—Ç–∫—É –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
        reply_markup=None
    )
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA! üéâ",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
@dp.message(StateFilter(OnboardingStates.waiting_for_first_name))
async def process_first_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(first_name=message.text)
    await message.answer("2/10. –í–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é.")
    await state.set_state(OnboardingStates.waiting_for_last_name)

@dp.message(StateFilter(OnboardingStates.waiting_for_last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    await state.update_data(last_name=message.text)
    await message.answer("3/10. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ).")
    await state.set_state(OnboardingStates.waiting_for_bio)

@dp.message(StateFilter(OnboardingStates.waiting_for_bio))
async def process_bio(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"""
    await state.update_data(bio=message.text)
    await message.answer("4/10. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äì –∫–∞–∫–æ–π.")
    await state.set_state(OnboardingStates.waiting_for_product)

@dp.message(StateFilter(OnboardingStates.waiting_for_product))
async def process_product(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ"""
    await state.update_data(product_info=message.text)
    await message.answer("5/10. –û–ø–∏—à–∏ —Å–≤–æ–∏ –ª—É—á—à–∏–µ –∫–µ–π—Å—ã.")
    await state.set_state(OnboardingStates.waiting_for_cases)

@dp.message(StateFilter(OnboardingStates.waiting_for_cases))
async def process_cases(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ–π—Å–æ–≤"""
    await state.update_data(case_studies=message.text)
    await message.answer("6/10. –ó–ê–ß–ï–ú —Ç–µ–±–µ –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥?")
    await state.set_state(OnboardingStates.waiting_for_motivation)

@dp.message(StateFilter(OnboardingStates.waiting_for_motivation))
async def process_motivation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"""
    await state.update_data(networking_motive=message.text)
    await message.answer("7/10. –¢–æ–ø-3 —Ç–≤–æ–∏—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–∏.")
    await state.set_state(OnboardingStates.waiting_for_values)

@dp.message(StateFilter(OnboardingStates.waiting_for_values))
async def process_values(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    await state.update_data(life_values=message.text)
    await message.answer("8/10. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É —Ç–µ–±—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –≥–æ–¥?")
    await state.set_state(OnboardingStates.waiting_for_goals)

@dp.message(StateFilter(OnboardingStates.waiting_for_goals))
async def process_goals(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–π"""
    await state.update_data(goals=message.text)
    await message.answer("9/10. –ö–∞–∫–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ —Ç—ã –≤–µ–¥—ë—à—å? (—Å–ø–æ—Ä—Ç, –π–æ–≥–∞, –º–µ–¥–∏—Ç–∞—Ü–∏–∏‚Ä¶)")
    await state.set_state(OnboardingStates.waiting_for_lifestyle)

@dp.message(StateFilter(OnboardingStates.waiting_for_lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏"""
    await state.update_data(lifestyle=message.text)
    await message.answer("10/10. –°—Å—ã–ª–∫–∞ –Ω–∞ Instagram (–∏–ª–∏ –¥—Ä—É–≥—É—é —Å–æ—Ü—Å–µ—Ç—å).")
    await state.set_state(OnboardingStates.waiting_for_social)

@dp.message(StateFilter(OnboardingStates.waiting_for_social))
async def process_social_and_generate_card(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    await state.update_data(social_link=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –≤–∏–∑–∏—Ç–∫—É...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç–∫—É —á–µ—Ä–µ–∑ OpenAI
    business_card = openai_service.generate_business_card(data)
    
    if business_card:
        await progress_msg.delete()
        await message.answer(
            "üéâ –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" + business_card,
            reply_markup=get_card_management_keyboard(),
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(generated_card=business_card)
    else:
        await progress_msg.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∫–æ–π
@dp.callback_query(F.data == "save_card")
async def save_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    profile_data = {
        'bio': data.get('bio'),
        'product_info': data.get('product_info'),
        'case_studies': data.get('case_studies'),
        'networking_motive': data.get('networking_motive'),
        'life_values': data.get('life_values'),
        'lifestyle': data.get('lifestyle'),
        'social_link': data.get('social_link'),
        'generated_card': data.get('generated_card')
    }
    
    if db.save_profile(callback.from_user.id, profile_data):
        # –û—Ç–º–µ—á–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        db.complete_onboarding(callback.from_user.id)
        
        await callback.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=get_categories_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    category_id = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = db.get_categories()
    selected_category = next((cat for cat in categories if str(cat['category_id']) == category_id), None)
    
    if selected_category:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        user_profile = db.get_profile(callback.from_user.id)
        if user_profile:
            user_profile['category'] = selected_category['category_name']
            db.save_profile(callback.from_user.id, user_profile)
        
        await callback.message.edit_text(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_category['category_emoji']} {selected_category['category_name']}\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AlteriA! üéâ",
            reply_markup=None
        )
        
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "regenerate_card")
async def regenerate_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑–∏—Ç–∫–∏"""
    data = await state.get_data()
    
    progress_msg = await callback.message.edit_text("‚è≥ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤–∏–∑–∏—Ç–∫–∏...")
    
    # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑–∏—Ç–∫—É
    new_card = openai_service.regenerate_business_card(data, data.get('generated_card', ''))
    
    if new_card:
        await progress_msg.edit_text(
            "üéâ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–∑–∏—Ç–∫–∏ –≥–æ—Ç–æ–≤–∞!\n\n" + new_card,
            reply_markup=get_card_management_keyboard(),
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.update_data(generated_card=new_card)
    else:
        await progress_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –≤–∏–∑–∏—Ç–∫–∏.",
            reply_markup=get_card_management_keyboard()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "edit_card")
async def edit_business_card(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∫–∏"""
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–π –≤–∏–∑–∏—Ç–∫–∏:",
        reply_markup=None
    )
    await state.set_state(EditStates.waiting_for_manual_edit)
    await callback.answer()

@dp.message(StateFilter(EditStates.waiting_for_manual_edit))
async def process_manual_edit(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    new_card = message.text
    await state.update_data(generated_card=new_card)
    
    await message.answer(
        "‚úÖ –í–∏–∑–∏—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n" + new_card,
        reply_markup=get_card_management_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(None)

@dp.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=None
    )
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(F.text == "üìÅ –ú–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(F.text == "üÜî –í–∏–∑–∏—Ç–∫–∞")
async def show_business_card(message: types.Message):
    """–ü–æ–∫–∞–∑ –≤–∏–∑–∏—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_profile = db.get_profile(message.from_user.id)
    
    if user_profile and user_profile.get('generated_card'):
        await message.answer(
            "üìã –í–∞—à–∞ –≤–∏–∑–∏—Ç–∫–∞:\n\n" + user_profile['generated_card'],
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∏–∑–∏—Ç–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_yes_no_keyboard()
        )

@dp.message(F.text == "üéØ –ú–æ–∏ —Ü–µ–ª–∏")
async def show_goals_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await message.answer(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìÖ –ü—Ä–∏–≤—ã—á–∫–∏")
async def show_habits_menu(message: types.Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habits = db.get_user_habits(user_id, active_only=True)
    daily_habits = [habit for habit in habits if habit.get('habit_type') == 'daily']
    
    if not daily_habits:
        await message.answer(
            "üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="add_habit")],
                    [InlineKeyboardButton(text="üìä –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="habits_menu")]
                ]
            ),
            parse_mode="Markdown"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
    await message.answer(
        "üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**",
        reply_markup=get_habits_list_keyboard(daily_habits),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å")
async def show_calendar_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π
    from datetime import date, timedelta
    today = date.today()
    tomorrow = today + timedelta(days=1)
    
    today_events = db.get_user_events(user_id, start_date=today.isoformat(), end_date=today.isoformat())
    upcoming_events = db.get_user_events(user_id, start_date=tomorrow.isoformat(), end_date=(today + timedelta(days=7)).isoformat())
    
    stats_text = f"üìä –°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today_events)}\n"
    stats_text += f"üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ (7 –¥–Ω–µ–π): {len(upcoming_events)}"
    
    await message.answer(
        f"üìÜ **–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫**\n\n{stats_text}",
        reply_markup=get_calendar_menu_keyboard(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "goals_menu")
async def show_goals_menu_callback(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–ª—è–º–∏ (callback –≤–µ—Ä—Å–∏—è)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="add_goals")],
            [InlineKeyboardButton(text="üìÖ –¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="show_daily_goals")],
            [InlineKeyboardButton(text="üìÜ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü", callback_data="show_monthly_goals")],
            [InlineKeyboardButton(text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="update_goals")]
        ]
    )
    
    await callback.message.edit_text(
        "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "add_goals")
async def add_goals_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–µ–π"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ —Å–ø–∏—Å–∫–æ–º (–∫–∞–∂–¥–∞—è —Ü–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
        reply_markup=None
    )
    await state.set_state(GoalStates.waiting_for_goals_input)
    await callback.answer()

@dp.message(StateFilter(GoalStates.waiting_for_goals_input))
async def process_goals_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–π"""
    goals_text = message.text.strip()
    goals_list = [goal.strip() for goal in goals_text.split('\n') if goal.strip()]
    
    if not goals_list:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–µ–ª—å.")
        return
    
    await state.update_data(goals_list=goals_list)
    await message.answer(
        f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Ü–µ–ª–µ–π: {len(goals_list)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–µ–π:",
        reply_markup=get_goal_type_keyboard()
    )
    await state.set_state(GoalStates.waiting_for_goal_type)

@dp.callback_query(F.data.startswith("goal_type_"))
async def process_goal_type(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ü–µ–ª–∏"""

import asyncio
import logging
from datetime import datetime, time
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
active_reminders = {}

class ReminderStates(StatesGroup):
    waiting_for_interval = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()

async def start_habit_reminders(bot, db, user_id: int, habit_id: int):
    """–ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    reminder_key = f"{user_id}_{habit_id}"
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if reminder_key in active_reminders:
        active_reminders[reminder_key].cancel()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    task = asyncio.create_task(habit_reminder_loop(bot, db, user_id, habit_id))
    active_reminders[reminder_key] = task
    
    logger.info(f"Started reminders for user {user_id}, habit {habit_id}")

async def stop_habit_reminders(user_id: int, habit_id: int):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—ã—á–∫–∏"""
    reminder_key = f"{user_id}_{habit_id}"
    
    if reminder_key in active_reminders:
        active_reminders[reminder_key].cancel()
        del active_reminders[reminder_key]
        logger.info(f"Stopped reminders for user {user_id}, habit {habit_id}")

def is_within_reminder_time(start_time_str: str, end_time_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        current_time = datetime.now().time()
        start_time = datetime.strptime(start_time_str, "%H:%M").time()
        end_time = datetime.strptime(end_time_str, "%H:%M").time()
        
        if start_time <= end_time:
            # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 07:00 - 22:00
            return start_time <= current_time <= end_time
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 22:00 - 07:00
            return current_time >= start_time or current_time <= end_time
    except:
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

async def habit_reminder_loop(bot, db, user_id: int, habit_id: int):
    """–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = db.get_reminder_settings(user_id)
            
            if not settings['is_enabled']:
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
                await stop_habit_reminders(user_id, habit_id)
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            if not is_within_reminder_time(settings['start_time'], settings['end_time']):
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (1 –º–∏–Ω—É—Ç–∞)
                await asyncio.sleep(60)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
            habit_stats = db.get_habit_stats(user_id, habit_id, days=1)
            completed_today = habit_stats.get('completed_count', 0) or 0
            
            if completed_today > 0:
                # –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await stop_habit_reminders(user_id, habit_id)
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—ã—á–∫–µ
            habits = db.get_user_habits(user_id)
            habit = next((h for h in habits if h['habit_id'] == habit_id), None)
            
            if not habit or not habit['is_active']:
                # –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await stop_habit_reminders(user_id, habit_id)
                break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            habit_name = habit['habit_name']
            target_frequency = habit.get('target_frequency', 1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = db.get_user_habits(user_id)
            
            if not habits:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
            habits_text = "üìÖ **–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"
            
            for habit in habits:
                habit_id = habit['habit_id']
                habit_name = habit['habit_name']
                target_freq = habit['target_frequency']
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è
                completed_today = db.get_habit_completion_count(user_id, habit_id, datetime.now().date())
                if completed_today is None:
                    completed_today = 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞
                is_completed = completed_today >= target_freq
                
                if is_completed:
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ - –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                    habits_text += f"‚úÖ {target_freq} ‚ö° {habit_name} ‚úÖ {completed_today}\n"
                else:
                    # –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ - –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏ –≤–Ω–∏–º–∞–Ω–∏—è
                    habits_text += f"üî¥ {target_freq} ‚ö° {habit_name} ‚úÖ {completed_today} ‚ö†Ô∏è\n"
            
            habits_text += "\nüí° –ö—Ä–∞—Å–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏"
            
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=habits_text,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(
                                text="üìÖ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", 
                                callback_data="show_habits_menu"
                            )],
                            [InlineKeyboardButton(
                                text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                                callback_data=f"stop_reminders_{habit_id}"
                            )]
                        ]
                    )
                )
                logger.info(f"Sent habits list reminder for user {user_id}")
            except Exception as e:
                logger.error(f"Failed to send habits list reminder: {e}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            await asyncio.sleep(settings['interval'])
            
    except asyncio.CancelledError:
        logger.info(f"Reminder loop cancelled for user {user_id}, habit {habit_id}")
    except Exception as e:
        logger.error(f"Error in reminder loop: {e}")

async def start_daily_reminder_check(bot, db):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        cursor = db.conn.cursor()
        cursor.execute('''
            SELECT DISTINCT user_id FROM habits WHERE is_active = 1
        ''')
        users = cursor.fetchall()
        
        for (user_id,) in users:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = db.get_user_habits(user_id, active_only=True)
            
            for habit in habits:
                habit_id = habit['habit_id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è
                habit_stats = db.get_habit_stats(user_id, habit_id, days=1)
                completed_today = habit_stats.get('completed_count', 0) or 0
                
                if completed_today == 0:
                    # –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    await start_habit_reminders(bot, db, user_id, habit_id)
        
        logger.info("Daily reminder check completed")
    except Exception as e:
        logger.error(f"Error in daily reminder check: {e}")


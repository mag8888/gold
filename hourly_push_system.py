#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø–æ—á–∞—Å–æ–≤—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –ø—Ä–∏–≤—ã—á–∫–∞–º
"""

import asyncio
import logging
from datetime import datetime, time
from typing import List, Dict, Any
from aiogram import Bot
from database import Database

logger = logging.getLogger(__name__)

class HourlyPushSystem:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.is_running = False
        self.push_task = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        self.day_start_hour = 8   # 08:00
        self.day_end_hour = 22    # 22:00
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ—á–∞—Å–æ–≤—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.is_running:
            return
        
        self.is_running = True
        self.push_task = asyncio.create_task(self._hourly_push_loop())
        logger.info("Hourly push system started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        if self.push_task:
            self.push_task.cancel()
        logger.info("Hourly push system stopped")
    
    async def _hourly_push_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—á–∞—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.is_running:
            try:
                current_hour = datetime.now().hour
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –¥–Ω–µ–≤–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if self.day_start_hour <= current_hour < self.day_end_hour:
                    await self._send_hourly_push_notifications()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
                await self._wait_until_next_hour()
                
            except Exception as e:
                logger.error(f"Error in hourly push loop: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _wait_until_next_hour(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞"""
        now = datetime.now()
        next_hour = now.replace(minute=0, second=0, microsecond=0)
        next_hour = next_hour.replace(hour=next_hour.hour + 1)
        
        wait_seconds = (next_hour - now).total_seconds()
        await asyncio.sleep(wait_seconds)
    
    async def _send_hourly_push_notifications(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—á–∞—Å–æ–≤—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        logger.info("Starting hourly push notifications")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        users_with_habits = self.db.get_users_with_active_habits()
        
        sent_count = 0
        for user_id in users_with_habits:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                if self._is_user_goals_completed(user_id):
                    logger.info(f"User {user_id} has completed all goals, skipping")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
                incomplete_habits = self._get_incomplete_habits(user_id)
                
                if incomplete_habits:
                    await self._send_push_notification(user_id, incomplete_habits)
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.error(f"Error sending push to user {user_id}: {e}")
        
        logger.info(f"Sent {sent_count} hourly push notifications")
    
    def _is_user_goals_completed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().date()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = self.db.get_user_habits(user_id)
            if not habits:
                return True  # –ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ = —Ü–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–∏–≤—ã—á–∫—É
            for habit in habits:
                habit_id = habit['habit_id']
                target_count = habit.get('target_frequency', 1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                current_count = self.db.get_habit_progress_today(user_id, habit_id)
                
                # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                if current_count < target_count:
                    return False
            
            # –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            return True
            
        except Exception as e:
            logger.error(f"Error checking user goals completion: {e}")
            return False
    
    def _get_incomplete_habits(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"""
        try:
            today = datetime.now().date()
            incomplete_habits = []
            
            habits = self.db.get_user_habits(user_id)
            
            for habit in habits:
                habit_id = habit['habit_id']
                habit_name = habit['habit_name']
                target_count = habit.get('target_frequency', 1)
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                current_count = self.db.get_habit_progress_today(user_id, habit_id)
                
                # –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if current_count < target_count:
                    incomplete_habits.append({
                        'id': habit_id,
                        'name': habit_name,
                        'current': current_count,
                        'target': target_count,
                        'remaining': target_count - current_count
                    })
            
            return incomplete_habits
            
        except Exception as e:
            logger.error(f"Error getting incomplete habits: {e}")
            return []
    
    async def _send_push_notification(self, user_id: int, incomplete_habits: List[Dict[str, Any]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö**\n\n"
            message += "–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            
            for habit in incomplete_habits:
                remaining = habit['remaining']
                name = habit['name']
                current = habit['current']
                target = habit['target']
                
                message += f"üî¥ **{name}**\n"
                message += f"   –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∏–∑ {target}\n"
                message += f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {current}/{target}\n\n"
            
            message += "üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="Markdown"
            )
            
            logger.info(f"Sent push notification to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending push notification to user {user_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
hourly_push_system = None


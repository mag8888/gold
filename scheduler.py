import asyncio
import schedule
import threading
import time
from datetime import datetime, date
from typing import List
import logging

from aiogram import Bot
from database import Database
from google_sheets import sheets_manager

logger = logging.getLogger(__name__)

class ReportScheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.is_running = False
        self.scheduler_thread = None
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.is_running:
            return
        
        self.is_running = True
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self._setup_schedule()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("Report scheduler started")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        logger.info("Report scheduler stopped")
    
    def _setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 21:00 –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, 20:00 –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
        report_time = self._get_setting_with_fallback('report_time', '21:00')
        reminder_time = self._get_setting_with_fallback('reminder_time', '20:00')
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        schedule.every().day.at(report_time).do(self._schedule_daily_reports)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö
        schedule.every().day.at(reminder_time).do(self._schedule_goal_reminders)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –≤ 00:00
        schedule.every().day.at("00:00").do(self._schedule_habits_daily_report)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ 00:01
        schedule.every().day.at("00:01").do(self._schedule_habits_reset)
        
        logger.info(f"Scheduled daily reports at {report_time}")
        logger.info(f"Scheduled goal reminders at {reminder_time}")
        logger.info("Scheduled habits daily report at 00:00")
        logger.info("Scheduled habits reset at 00:01")
    
    def _get_setting_with_fallback(self, key: str, default: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å fallback –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Google Sheets
        if sheets_manager.is_connected():
            value = sheets_manager.get_setting(key)
            if value:
                return value
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
        value = self.db.get_setting(key)
        return value if value else default
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    def _schedule_daily_reports(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        asyncio.create_task(self._send_daily_reports())
    
    def _schedule_goal_reminders(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ü–µ–ª—è—Ö"""
        asyncio.create_task(self._send_goal_reminders())
    
    def _schedule_habits_daily_report(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º"""
        asyncio.create_task(self._send_habits_daily_report())
    
    def _schedule_habits_reset(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫"""
        asyncio.create_task(self._reset_habits_counters())
    
    async def _send_daily_reports(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            logger.info("Starting daily reports sending")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ü–µ–ª—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            users_with_goals = self._get_users_with_daily_goals()
            
            sent_count = 0
            for user_id in users_with_goals:
                try:
                    report = await self._generate_daily_report(user_id)
                    if report:
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=report,
                            parse_mode="Markdown"
                        )
                        sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                except Exception as e:
                    logger.error(f"Failed to send daily report to user {user_id}: {e}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                    if "bot was blocked" in str(e).lower():
                        self.db.update_user_status(user_id, 'blocked')
            
            logger.info(f"Daily reports sent to {sent_count} users")
            
        except Exception as e:
            logger.error(f"Error in daily reports sending: {e}")
    
    async def _send_goal_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö"""
        try:
            logger.info("Starting goal reminders sending")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            users_with_incomplete_goals = self.db.get_users_with_incomplete_goals(date.today())
            
            sent_count = 0
            for user_id in users_with_incomplete_goals:
                try:
                    reminder = await self._generate_goal_reminder(user_id)
                    if reminder:
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=reminder,
                            parse_mode="Markdown"
                        )
                        sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                except Exception as e:
                    logger.error(f"Failed to send goal reminder to user {user_id}: {e}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                    if "bot was blocked" in str(e).lower():
                        self.db.update_user_status(user_id, 'blocked')
            
            logger.info(f"Goal reminders sent to {sent_count} users")
            
        except Exception as e:
            logger.error(f"Error in goal reminders sending: {e}")
    
    def _get_users_with_daily_goals(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        return self.db.get_all_active_users()
    
    async def _generate_daily_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            daily_goals = self.db.get_user_goals(
                user_id=user_id,
                goal_type='daily',
                date_filter=date.today()
            )
            
            monthly_goals = self.db.get_user_goals(
                user_id=user_id,
                goal_type='monthly'
            )
            
            if not daily_goals and not monthly_goals:
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "üìä **–í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n"
            
            if daily_goals:
                report += "üìÖ **–¶–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                completed_daily = 0
                for goal in daily_goals:
                    emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
                    report += f"{emoji} {goal['goal_text']}\n"
                    if goal['status'] == 'completed':
                        completed_daily += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º —Ü–µ–ª—è–º
                if daily_goals:
                    completion_rate = (completed_daily / len(daily_goals)) * 100
                    report += f"\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_daily}/{len(daily_goals)} ({completion_rate:.0f}%)\n"
            
            if monthly_goals:
                report += "\nüìÜ **–¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü:**\n"
                completed_monthly = 0
                for goal in monthly_goals:
                    emoji = "‚úÖ" if goal['status'] == 'completed' else "‚ö°Ô∏è"
                    progress_info = ""
                    if goal.get('progress_data'):
                        progress_info = f" ({goal['progress_data']})"
                    report += f"{emoji} {goal['goal_text']}{progress_info}\n"
                    if goal['status'] == 'completed':
                        completed_monthly += 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—á–Ω—ã–º —Ü–µ–ª—è–º
                if monthly_goals:
                    completion_rate = (completed_monthly / len(monthly_goals)) * 100
                    report += f"\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_monthly}/{len(monthly_goals)} ({completion_rate:.0f}%)\n"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if daily_goals and all(goal['status'] == 'completed' for goal in daily_goals):
                report += "\nüéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**"
            elif daily_goals:
                incomplete_count = len([g for g in daily_goals if g['status'] != 'completed'])
                report += f"\nüí™ **–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {incomplete_count} —Ü–µ–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!**"
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating daily report for user {user_id}: {e}")
            return None
    
    async def _generate_goal_reminder(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            incomplete_goals = [
                goal for goal in self.db.get_user_goals(
                    user_id=user_id,
                    goal_type='daily',
                    date_filter=date.today()
                )
                if goal['status'] != 'completed'
            ]
            
            if not incomplete_goals:
                return None
            
            user = self.db.get_user(user_id)
            first_name = user['first_name'] if user else "–î—Ä—É–≥"
            
            reminder = f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, {first_name}!**\n\n"
            reminder += f"–£ –≤–∞—Å –µ—Å—Ç—å {len(incomplete_goals)} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            
            for goal in incomplete_goals:
                reminder += f"‚ö°Ô∏è {goal['goal_text']}\n"
            
            reminder += "\nüí™ **–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —É—Å–ø–µ—Ö—É!**"
            
            return reminder
            
        except Exception as e:
            logger.error(f"Error generating goal reminder for user {user_id}: {e}")
            return None
    
    async def send_broadcast_message(self, message: str, parse_mode: str = "Markdown"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            active_users = self.db.get_all_active_users()
            sent_count = 0
            failed_count = 0
            
            for user_id in active_users:
                try:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode=parse_mode
                    )
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    failed_count += 1
                    logger.error(f"Failed to send broadcast to user {user_id}: {e}")
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                    if "bot was blocked" in str(e).lower():
                        self.db.update_user_status(user_id, 'blocked')
            
            logger.info(f"Broadcast sent to {sent_count} users, {failed_count} failed")
            return sent_count, failed_count
            
        except Exception as e:
            logger.error(f"Error in broadcast sending: {e}")
            return 0, 0

    async def _send_habits_daily_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –≤ 00:00"""
        try:
            logger.info("Starting habits daily report sending")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
            users_with_habits = self.db.get_all_users_with_habits()
            
            sent_count = 0
            for user_id in users_with_habits:
                try:
                    report = await self._generate_habits_daily_report(user_id)
                    if report:
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=report,
                            parse_mode="Markdown"
                        )
                        sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                        await asyncio.sleep(0.1)
                        
                except Exception as e:
                    logger.error(f"Failed to send habits daily report to user {user_id}: {e}")
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
                    if "bot was blocked" in str(e).lower():
                        self.db.update_user_status(user_id, 'blocked')
            
            logger.info(f"Habits daily reports sent to {sent_count} users")
            
        except Exception as e:
            logger.error(f"Error in habits daily reports sending: {e}")
    
    async def _reset_habits_counters(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–≤—ã—á–µ–∫ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å (00:01)"""
        try:
            logger.info("Starting habits counters reset")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
            users_with_habits = self.db.get_all_users_with_habits()
            
            reset_count = 0
            for user_id in users_with_habits:
                try:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    success = self.db.reset_daily_habits_counters(user_id)
                    if success:
                        reset_count += 1
                        
                except Exception as e:
                    logger.error(f"Failed to reset habits counters for user {user_id}: {e}")
            
            logger.info(f"Habits counters reset for {reset_count} users")
            
        except Exception as e:
            logger.error(f"Error in habits counters reset: {e}")
    
    async def _generate_habits_daily_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from datetime import datetime, timedelta
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            habits = self.db.get_user_habits(user_id, active_only=True)
            
            if not habits:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞
            yesterday = (datetime.now() - timedelta(days=1)).date()
            
            user = self.db.get_user(user_id)
            first_name = user['first_name'] if user else "–î—Ä—É–≥"
            
            report = f"üìä **–û—Ç—á–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∑–∞ {yesterday.strftime('%d.%m.%Y')}, {first_name}!**\n\n"
            report += "üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
            
            total_habits = 0
            completed_habits = 0
            
            for habit in habits:
                if habit.get('habit_type') == 'daily':
                    total_habits += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞ –≤—á–µ—Ä–∞
                    stats = self.db.get_habit_stats(user_id, habit['habit_id'], days=1)
                    
                    target = habit.get('target_frequency', 1)
                    completed = stats.get('completed_count', 0)
                    
                    if completed >= target:
                        completed_habits += 1
                        emoji = "‚úÖ"
                    else:
                        emoji = "üî¥"
                    
                    report += f"{target} ‚ö° {habit['habit_name']} {emoji} {completed}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if total_habits > 0:
                completion_percentage = (completed_habits / total_habits) * 100
                report += f"\nüìà **–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_habits}/{total_habits} ({completion_percentage:.1f}%)**\n"
                
                # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if completion_percentage == 100:
                    report += "\nüéâ **–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**"
                elif completion_percentage >= 80:
                    report += "\nüí™ **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!**"
                elif completion_percentage >= 50:
                    report += "\n‚ö° **–ù–µ–ø–ª–æ—Ö–æ! –ï—Å—Ç—å –∫ —á–µ–º—É —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!**"
                else:
                    report += "\nüî• **–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –í–ø–µ—Ä–µ–¥!**"
            
            return report
            
        except Exception as e:
            logger.error(f"Error generating habits daily report for user {user_id}: {e}")
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main)
scheduler = None

